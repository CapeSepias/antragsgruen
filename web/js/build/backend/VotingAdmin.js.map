{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","[object Object]","$element","this","createVueWidget","initVotingCreater","$vueEl","find","allVotingData","data","voteSettingsUrl","voteCreateUrl","addableMotions","pollUrl","widget","Vue","el","template","votings","csrf","$","attr","pollingId","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","newStatus","organizations","op","status","map","orga","id","members_present","title","assignedMotion","createVoting","window","setTimeout","scrollintoview","top_offset","itemType","itemId","itemDefinition","reloadData","get","console","error","startPolling","setInterval","clearInterval","$opener","$form","on","removeClass","addClass","ev","stopPropagation","preventDefault","val"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,iBAAc,ECC1BJ,EAAAI,YAAA,MAGIC,YAAoBC,GAAAC,KAAAD,SAAAA,EAChBC,KAAKC,kBACLD,KAAKE,oBAGDJ,kBACJ,MAAMK,EAASH,KAAKD,SAASK,KAAK,gBAAgB,GAC5CC,EAAgBL,KAAKD,SAASO,KAAK,UACnCC,EAAkBP,KAAKD,SAASO,KAAK,qBACrCE,EAAgBR,KAAKD,SAASO,KAAK,eACnCG,EAAiBT,KAAKD,SAASO,KAAK,mBACpCI,EAAUV,KAAKD,SAASO,KAAK,YAEnCN,KAAKW,OAAS,IAAIC,IAAI,CAClBC,GAAIV,EACJW,SAAU,wlBAWVR,KAAI,KACO,CACHS,QAASV,EACTI,eAAAA,EACAO,KAAMC,EAAE,QAAQb,KAAK,yBAAyBc,KAAK,WACnDC,UAAW,OAGnBC,QAAS,CACLC,kBAAmB,SAAUC,EAAeC,GACxC,IAAIC,EAAW,CACXC,MAAOzB,KAAKgB,MAEZO,IACAC,EAAW9B,OAAOgC,OAAOF,EAAUD,IAEvC,MAAMZ,EAASX,KACT2B,EAAMpB,EAAgBqB,QAAQ,gBAAiBN,GACrDL,EAAEY,KAAKF,EAAKH,GAAU,SAAUlB,QACPwB,IAAjBxB,EAAKyB,SAA0BzB,EAAKyB,QAIxCpB,EAAOI,QAAUT,EAHb0B,MAAM1B,EAAK2B,YAIhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBtC,UAAUwB,EAAee,EAAWC,GAChCtC,KAAKqB,kBAAkBC,EAAe,CAClCiB,GAAI,gBACJC,OAAQH,EACRC,cAAeA,EAAcG,KAAIC,IAAiB,CAC9CC,GAAID,EAAKC,GACTC,gBAAiBF,EAAKE,uBAIlC9C,aAAawB,EAAeuB,EAAOC,GAC/B9C,KAAKqB,kBAAkBC,EAAe,CAClCiB,GAAI,gBACJM,MAAAA,EACAC,eAAAA,KAGRhD,aAAawB,GACTtB,KAAKqB,kBAAkBC,EAAe,CAClCiB,GAAI,mBAGZQ,aAAc,SAAUF,EAAOC,GAC3B,IAAItB,EAAW,CACXC,MAAOzB,KAAKgB,KACZ6B,MAAAA,EACAC,eAAAA,GAEJ,MAAMnC,EAASX,KACfiB,EAAEY,KAAKrB,EAAegB,GAAU,SAAUlB,QACjBwB,IAAjBxB,EAAKyB,SAA0BzB,EAAKyB,SAIxCpB,EAAOI,QAAUT,EAAc,QAE/B0C,OAAOC,YAAW,KACdhC,EAAE,UAAYX,EAAqB,gBAAG4C,eAAe,CAACC,YAAa,QACpE,MAPCnB,MAAM1B,EAAK2B,YAQhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBtC,WAAWwB,EAAe8B,EAAUC,GAChCrD,KAAKqB,kBAAkBC,EAAe,CAClCiB,GAAI,cACJa,SAAAA,EACAC,OAAAA,KAGRvD,QAAQwB,EAAegC,GACnBtD,KAAKqB,kBAAkBC,EAAe,CAClCiB,GAAI,WACJe,eAAAA,KAGRC,WAAY,WACR,MAAM5C,EAASX,KACfiB,EAAEuC,IAAI9C,GAAS,SAAUJ,GACrBK,EAAOI,QAAUT,KAClB4B,OAAM,SAAUC,GACfsB,QAAQC,MAAM,0CAA2CvB,OAGjEwB,aAAc,WACV,MAAMhD,EAASX,KACfA,KAAKmB,UAAY6B,OAAOY,aAAY,WAChCjD,EAAO4C,eACR,OAGXzD,gBACIkD,OAAOa,cAAc7D,KAAKmB,YAE9BrB,UACIE,KAAK2D,kBAKT7D,oBACJ,MAAMgE,EAAU9D,KAAKD,SAASK,KAAK,uBAC/B2D,EAAQ/D,KAAKD,SAASK,KAAK,uBAC/B0D,EAAQE,GAAG,SAAS,KAChBD,EAAME,YAAY,UAClBH,EAAQI,SAAS,aAErBH,EAAM3D,KAAK,QAAQ4D,GAAG,UAAWG,IAC7BA,EAAGC,kBACHD,EAAGE,iBACHrE,KAAKW,OAAOoC,aAAagB,EAAM3D,KAAK,kBAAkBkE,MAAOP,EAAM3D,KAAK,2BAA2BkE,OAEnGP,EAAMG,SAAS,UACfJ,EAAQG,YAAY","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class VotingAdmin {\n    private widget;\n\n    constructor(private $element: JQuery) {\n        this.createVueWidget();\n        this.initVotingCreater();\n    }\n\n    private createVueWidget() {\n        const $vueEl = this.$element.find(\".votingAdmin\")[0];\n        const allVotingData = this.$element.data('voting');\n        const voteSettingsUrl = this.$element.data('url-vote-settings');\n        const voteCreateUrl = this.$element.data('vote-create');\n        const addableMotions = this.$element.data('addable-motions');\n        const pollUrl = this.$element.data('url-poll');\n\n        this.widget = new Vue({\n            el: $vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-item=\"addItem\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votings: allVotingData,\n                    addableMotions,\n                    csrf: $(\"head\").find(\"meta[name=csrf-token]\").attr(\"content\") as string,\n                    pollingId: null\n                };\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setStatus(votingBlockId, newStatus, organizations) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                        organizations: organizations.map(orga => { return {\n                            id: orga.id,\n                            members_present: orga.members_present,\n                        }}),\n                    });\n                },\n                saveSettings(votingBlockId, title, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (title, assignedMotion) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        title,\n                        assignedMotion\n                    };\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addItem(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-item',\n                        itemDefinition\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.startPolling()\n            }\n        });\n    }\n\n    private initVotingCreater() {\n        const $opener = this.$element.find('.createVotingOpener'),\n            $form = this.$element.find('.createVotingHolder');\n        $opener.on('click', () => {\n            $form.removeClass('hidden');\n            $opener.addClass('hidden');\n        });\n        $form.find('form').on('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            this.widget.createVoting($form.find('.settingsTitle').val(), $form.find('.settingsAssignedMotion').val());\n\n            $form.addClass('hidden');\n            $opener.removeClass('hidden');\n        });\n    }\n}\n"]}