{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","constructor","$element","this","element","createVueWidget","initVotingCreater","$","tooltip","vueEl","querySelector","voteSettingsUrl","getAttribute","voteCreateUrl","voteDownloadUrl","addableMotions","JSON","parse","pollUrl","votingInitJson","initUserGroups","widget","Vue","el","template","data","votingsJson","votings","userGroups","csrf","document","pollingId","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","setVotingFromJson","setVotingFromObject","setStatus","newStatus","op","status","saveSettings","title","answerTemplate","majorityType","votePolicy","resultsPublic","votesPublic","assignedMotion","deleteVoting","createVoting","answers","specificQuestion","window","setTimeout","scrollintoview","top_offset","removeItem","itemType","itemId","addIMotion","itemDefinition","addQuestion","question","reloadData","get","console","error","startPolling","setInterval","beforeDestroy","clearInterval","created","initPolicyWidget","$widget","$select","find","selectize","$policySelect","on","parseInt","val","removeClass","addClass","trigger","opener","form","addEventListener","classList","remove","add","getRadioListValue","selector","defaultValue","querySelectorAll","input","checked","recalcQuestionListener","recalcAnswerTypeListener","ev","stopPropagation","preventDefault","assigned","map"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nconst POLICY_USER_GROUPS  = 6;\n\nexport class VotingAdmin {\n    private widget;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n        this.initVotingCreater();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const voteDownloadUrl = this.element.getAttribute('data-url-vote-download');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const votingInitJson = this.element.getAttribute('data-voting');\n        const initUserGroups = JSON.parse(this.element.getAttribute('data-user-groups'));\n\n        this.widget = new Vue({\n            el: vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     :alreadyAddedItems=\"alreadyAddedItems\"\n                                     :userGroups=\"userGroups\"\n                                     :voteDownloadUrl=\"voteDownloadUrl\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-imotion=\"addIMotion\"\n                                     @add-question=\"addQuestion\"\n                                     ref=\"voting-admin-widget\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votingsJson: null,\n                    votings: null,\n                    userGroups: initUserGroups,\n                    voteDownloadUrl,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                setStatus(votingBlockId, newStatus) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                    });\n                },\n                saveSettings(votingBlockId, title, answerTemplate, majorityType, votePolicy, resultsPublic, votesPublic, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        answerTemplate,\n                        majorityType,\n                        votePolicy,\n                        resultsPublic,\n                        votesPublic,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (type, answers, title, specificQuestion, assignedMotion, majorityType, votePolicy, userGroups, resultsPublic, votesPublic) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        type,\n                        answers,\n                        title,\n                        specificQuestion,\n                        assignedMotion,\n                        majorityType,\n                        votePolicy,\n                        userGroups,\n                        resultsPublic,\n                        votesPublic\n                    };\n\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addIMotion(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-imotion',\n                        itemDefinition\n                    });\n                },\n                addQuestion(votingBlockId, question) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-question',\n                        question\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n\n        // Used by tests to control vue-select\n        window['votingAdminWidget'] = this.widget;\n    }\n\n    private initPolicyWidget() {\n        const $widget = $(this.element);\n        const $select: any = $widget.find('.userGroupSelect');\n        $select.find(\"select\").selectize({});\n\n        const $policySelect = $widget.find(\".policySelect\");\n        $policySelect.on(\"change\", () => {\n            if (parseInt($policySelect.val() as string, 10) === POLICY_USER_GROUPS) {\n                $select.removeClass(\"hidden\");\n            } else {\n                $select.addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder'),\n            specificQuestion = this.element.querySelector('.specificQuestion'),\n            majorityType = this.element.querySelector('.majorityTypeSettings');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n\n        const getRadioListValue = (selector: string, defaultValue: string) => {\n            let val = defaultValue;\n            form.querySelectorAll(selector).forEach(el => {\n                const input = el as HTMLInputElement;\n                if (input.checked) {\n                    val = input.value;\n                }\n            });\n            return val;\n        };\n\n        const recalcQuestionListener = () => {\n            if (getRadioListValue('.votingType input', 'question') === 'question') {\n                specificQuestion.classList.remove('hidden');\n            } else {\n                specificQuestion.classList.add('hidden');\n            }\n        };\n        form.querySelectorAll('.votingType input').forEach(el => {\n            el.addEventListener('change', recalcQuestionListener);\n        });\n        recalcQuestionListener();\n\n        const recalcAnswerTypeListener = () => {\n            if (getRadioListValue('.answerTemplate input', '0') === '2') {\n                majorityType.classList.add('hidden');\n            } else {\n                majorityType.classList.remove('hidden');\n\n            }\n        };\n        form.querySelectorAll('.answerTemplate input').forEach(el => {\n            el.addEventListener('change', recalcAnswerTypeListener);\n        });\n        recalcAnswerTypeListener();\n\n        this.initPolicyWidget();\n\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const type = getRadioListValue('.votingType input', 'question');\n            const answers = parseInt(getRadioListValue('.answerTemplate input', '0'), 10); // Default\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const specificQuestion = form.querySelector('.settingsQuestion') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            const majorityType = parseInt(getRadioListValue('.majorityTypeSettings input', '1'), 10); // Default: simple majority\n            const resultsPublic = parseInt(getRadioListValue('.resultsPublicSettings input', '1'), 10); // Default: everyone\n            const votesPublic = parseInt(getRadioListValue('.votesPublicSettings input', '0'), 10); // Default: nobody\n            const votePolicy = parseInt((form.querySelector('.policySelect') as HTMLSelectElement).value, 10);\n            let userGroups;\n            if (votePolicy === POLICY_USER_GROUPS) {\n                userGroups = (form.querySelector('.userGroupSelectList') as any).selectize.items.map(item => parseInt(item, 10));\n            } else {\n                userGroups = [];\n            }\n            this.widget.createVoting(type, answers, title.value, specificQuestion.value, assigned.value, majorityType, votePolicy, userGroups, resultsPublic, votesPublic);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}