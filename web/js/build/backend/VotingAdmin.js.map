{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","[object Object]","$element","this","createVueWidget","initVotingCreater","$vueEl","find","voteSettingsUrl","data","voteCreateUrl","addableMotions","pollUrl","votingInitJson","getAttribute","widget","Vue","el","template","votingsJson","votings","csrf","$","attr","pollingId","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","JSON","parse","newStatus","organizations","op","status","map","orga","id","members_present","title","assignedMotion","createVoting","window","setTimeout","scrollintoview","top_offset","itemType","itemId","itemDefinition","reloadData","get","setVotingFromJson","console","error","startPolling","setInterval","clearInterval","$opener","$form","on","removeClass","addClass","ev","stopPropagation","preventDefault","val"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class VotingAdmin {\n    private widget;\n\n    constructor(private $element: JQuery) {\n        this.createVueWidget();\n        this.initVotingCreater();\n    }\n\n    private createVueWidget() {\n        const $vueEl = this.$element.find(\".votingAdmin\")[0];\n        const voteSettingsUrl = this.$element.data('url-vote-settings');\n        const voteCreateUrl = this.$element.data('vote-create');\n        const addableMotions = this.$element.data('addable-motions');\n        const pollUrl = this.$element.data('url-poll');\n        const votingInitJson = this.$element[0].getAttribute('data-voting');\n\n        this.widget = new Vue({\n            el: $vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-item=\"addItem\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votingsJson: null,\n                    votings: null,\n                    addableMotions,\n                    csrf: $(\"head\").find(\"meta[name=csrf-token]\").attr(\"content\") as string,\n                    pollingId: null\n                };\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                setStatus(votingBlockId, newStatus, organizations) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                        organizations: organizations.map(orga => { return {\n                            id: orga.id,\n                            members_present: orga.members_present,\n                        }}),\n                    });\n                },\n                saveSettings(votingBlockId, title, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (title, assignedMotion) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        title,\n                        assignedMotion\n                    };\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addItem(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-item',\n                        itemDefinition\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n    }\n\n    private initVotingCreater() {\n        const $opener = this.$element.find('.createVotingOpener'),\n            $form = this.$element.find('.createVotingHolder');\n        $opener.on('click', () => {\n            $form.removeClass('hidden');\n            $opener.addClass('hidden');\n        });\n        $form.find('form').on('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            this.widget.createVoting($form.find('.settingsTitle').val(), $form.find('.settingsAssignedMotion').val());\n\n            $form.addClass('hidden');\n            $opener.removeClass('hidden');\n        });\n    }\n}\n"]}