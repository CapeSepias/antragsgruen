{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","constructor","$element","this","element","createVueWidget","initVotingCreater","initVotingSorter","$","tooltip","vueEl","querySelector","voteSettingsUrl","getAttribute","voteCreateUrl","voteDownloadUrl","addableMotions","JSON","parse","pollUrl","votingInitJson","initUserGroups","widget","Vue","createApp","template","data","isSorting","votingsJson","votings","userGroups","csrf","document","pollingId","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","setVotingFromJson","setVotingFromObject","toggleSorting","setStatus","newStatus","op","status","saveSettings","title","answerTemplate","majorityType","quorumType","votePolicy","resultsPublic","votesPublic","assignedMotion","deleteVoting","createVoting","answers","specificQuestion","window","setTimeout","scrollintoview","top_offset","removeItem","itemType","itemId","addIMotion","itemDefinition","addQuestion","question","setVotersToUserGroup","userIds","newUserGroup","reloadData","get","console","error","startPolling","setInterval","beforeUnmount","clearInterval","created","config","compilerOptions","whitespace","widgetComponent","mount","initPolicyWidget","$widget","$select","find","loadUrl","selectizeOption","loadThrottle","valueField","labelField","searchField","load","query","cb","then","res","selectize","$policySelect","on","parseInt","val","removeClass","addClass","trigger","addEventListener","opener","form","classList","remove","add","getRadioListValue","selector","defaultValue","querySelectorAll","el","input","checked","recalcQuestionListener","recalcAnswerTypeListener","ev","stopPropagation","preventDefault","assigned","map"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"declare var Vue: any;\n\nconst POLICY_USER_GROUPS  = 6;\n\nexport class VotingAdmin {\n    private widget: any;\n    private widgetComponent: any;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n        this.initVotingCreater();\n        this.initVotingSorter();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const voteDownloadUrl = this.element.getAttribute('data-url-vote-download');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const votingInitJson = this.element.getAttribute('data-voting');\n        const initUserGroups = JSON.parse(this.element.getAttribute('data-user-groups'));\n\n\n        this.widget = Vue.createApp({\n            template: `<div class=\"adminVotings\">\n                <voting-sort-widget :votings=\"votings\" v-if=\"isSorting\"></voting-sort-widget>\n                <voting-admin-widget\n                    v-if=\"!isSorting\"\n                    v-for=\"voting in votings\"\n                    :voting=\"voting\"\n                    :addableMotions=\"addableMotions\"\n                    :alreadyAddedItems=\"alreadyAddedItems\"\n                    :userGroups=\"userGroups\"\n                    :voteDownloadUrl=\"voteDownloadUrl\"\n                    @set-status=\"setStatus\"\n                    @save-settings=\"saveSettings\"\n                    @remove-item=\"removeItem\"\n                    @delete-voting=\"deleteVoting\"\n                    @add-imotion=\"addIMotion\"\n                    @add-question=\"addQuestion\"\n                    @set-voters-to-user-group=\"setVotersToUserGroup\"\n                    ref=\"voting-admin-widget\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    isSorting: false,\n                    votingsJson: null,\n                    votings: null,\n                    userGroups: initUserGroups,\n                    voteDownloadUrl,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                toggleSorting() {\n                    this.isSorting = !this.isSorting;\n                },\n                setStatus(votingBlockId, newStatus) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                    });\n                },\n                saveSettings(votingBlockId, title, answerTemplate, majorityType, quorumType, votePolicy, resultsPublic, votesPublic, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        answerTemplate,\n                        majorityType,\n                        quorumType,\n                        votePolicy,\n                        resultsPublic,\n                        votesPublic,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (type, answers, title, specificQuestion, assignedMotion, majorityType, votePolicy, userGroups, resultsPublic, votesPublic) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        type,\n                        answers,\n                        title,\n                        specificQuestion,\n                        assignedMotion,\n                        majorityType,\n                        votePolicy,\n                        userGroups,\n                        resultsPublic,\n                        votesPublic\n                    };\n\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addIMotion(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-imotion',\n                        itemDefinition\n                    });\n                },\n                addQuestion(votingBlockId, question) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-question',\n                        question\n                    });\n                },\n                setVotersToUserGroup(votingBlockId, userIds, newUserGroup) {\n                    this._performOperation(votingBlockId, {\n                        op: 'set-voters-to-user-group',\n                        userIds,\n                        newUserGroup\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeUnmount() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n\n        this.widget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](this.widget, 'voting');\n\n        this.widgetComponent = this.widget.mount(vueEl);\n\n        // Used by tests to control vue-select\n        window['votingAdminWidget'] = this.widgetComponent;\n    }\n\n    private initPolicyWidget() {\n        const $widget = $(this.element);\n        const $select: any = $widget.find('.userGroupSelect'),\n            loadUrl = $select.data('load-url');\n        let selectizeOption = {};\n        if (loadUrl) {\n            selectizeOption = Object.assign(selectizeOption, {\n                loadThrottle: null,\n                valueField: 'id',\n                labelField: 'label',\n                searchField: 'label',\n                load: function (query, cb) {\n                    if (!query) return cb();\n                    return $.get(loadUrl, {query}).then(res => {\n                        cb(res);\n                    });\n                }\n            });\n        }\n        $select.find(\"select\").selectize(selectizeOption);\n\n        const $policySelect = $widget.find(\".policySelect\");\n        $policySelect.on(\"change\", () => {\n            if (parseInt($policySelect.val() as string, 10) === POLICY_USER_GROUPS) {\n                $select.removeClass(\"hidden\");\n            } else {\n                $select.addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initVotingSorter() {\n        const sortToggle = this.element.querySelector('.sortVotings');\n        sortToggle.addEventListener('click', () => {\n            this.widgetComponent.toggleSorting();\n        });\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder'),\n            specificQuestion = this.element.querySelector('.specificQuestion'),\n            majorityType = this.element.querySelector('.majorityTypeSettings');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n\n        const getRadioListValue = (selector: string, defaultValue: string) => {\n            let val = defaultValue;\n            form.querySelectorAll(selector).forEach(el => {\n                const input = el as HTMLInputElement;\n                if (input.checked) {\n                    val = input.value;\n                }\n            });\n            return val;\n        };\n\n        const recalcQuestionListener = () => {\n            if (getRadioListValue('.votingType input', 'question') === 'question') {\n                specificQuestion.classList.remove('hidden');\n            } else {\n                specificQuestion.classList.add('hidden');\n            }\n        };\n        form.querySelectorAll('.votingType input').forEach(el => {\n            el.addEventListener('change', recalcQuestionListener);\n        });\n        recalcQuestionListener();\n\n        const recalcAnswerTypeListener = () => {\n            if (getRadioListValue('.answerTemplate input', '0') === '2') {\n                majorityType.classList.add('hidden');\n            } else {\n                majorityType.classList.remove('hidden');\n\n            }\n        };\n        form.querySelectorAll('.answerTemplate input').forEach(el => {\n            el.addEventListener('change', recalcAnswerTypeListener);\n        });\n        recalcAnswerTypeListener();\n\n        this.initPolicyWidget();\n\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const type = getRadioListValue('.votingType input', 'question');\n            const answers = parseInt(getRadioListValue('.answerTemplate input', '0'), 10); // Default\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const specificQuestion = form.querySelector('.settingsQuestion') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            const majorityType = parseInt(getRadioListValue('.majorityTypeSettings input', '1'), 10); // Default: simple majority\n            const resultsPublic = parseInt(getRadioListValue('.resultsPublicSettings input', '1'), 10); // Default: everyone\n            const votesPublic = parseInt(getRadioListValue('.votesPublicSettings input', '0'), 10); // Default: nobody\n            const votePolicy = parseInt((form.querySelector('.policySelect') as HTMLSelectElement).value, 10);\n            let userGroups;\n            if (votePolicy === POLICY_USER_GROUPS) {\n                userGroups = (form.querySelector('.userGroupSelectList') as any).selectize.items.map(item => parseInt(item, 10));\n            } else {\n                userGroups = [];\n            }\n            this.widgetComponent.createVoting(type, answers, title.value, specificQuestion.value, assigned.value, majorityType, votePolicy, userGroups, resultsPublic, votesPublic);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}