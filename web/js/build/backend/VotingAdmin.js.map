{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","[object Object]","$element","this","element","createVueWidget","initVotingCreater","$","tooltip","vueEl","querySelector","voteSettingsUrl","getAttribute","voteCreateUrl","addableMotions","JSON","parse","pollUrl","votingInitJson","widget","Vue","el","template","data","votingsJson","votings","csrf","document","pollingId","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","newStatus","organizations","op","status","map","orga","members_present","title","majorityType","resultsPublic","votesPublic","assignedMotion","createVoting","answers","description","window","setTimeout","scrollintoview","top_offset","itemType","itemId","itemDefinition","reloadData","get","setVotingFromJson","console","error","startPolling","setInterval","clearInterval","opener","form","addEventListener","classList","remove","add","getRadioListValue","selector","defaultValue","val","querySelectorAll","input","checked","log","ev","stopPropagation","preventDefault","parseInt","assigned"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class VotingAdmin {\n    private widget;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n        this.initVotingCreater();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const votingInitJson = this.element.getAttribute('data-voting');\n\n        this.widget = new Vue({\n            el: vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     :alreadyAddedItems=\"alreadyAddedItems\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-item=\"addItem\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votingsJson: null,\n                    votings: null,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                setStatus(votingBlockId, newStatus, organizations) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                        organizations: organizations.map(orga => { return {\n                            id: orga.id,\n                            members_present: orga.members_present,\n                        }}),\n                    });\n                },\n                saveSettings(votingBlockId, title, majorityType, resultsPublic, votesPublic, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        majorityType,\n                        resultsPublic,\n                        votesPublic,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (type, answers, title, description, assignedMotion, majorityType, resultsPublic, votesPublic) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        type,\n                        answers,\n                        title,\n                        description,\n                        assignedMotion,\n                        majorityType,\n                        resultsPublic,\n                        votesPublic\n                    };\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addItem(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-item',\n                        itemDefinition\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder'),\n            specificQuestion = this.element.querySelector('.specificQuestion');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n\n        const getRadioListValue = (selector: string, defaultValue: string) => {\n            let val = defaultValue;\n            form.querySelectorAll(selector).forEach(el => {\n                const input = el as HTMLInputElement;\n                if (input.checked) {\n                    console.log(input);\n                    val = input.value;\n                }\n            });\n            return val;\n        };\n\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const type = getRadioListValue('.votingType input', 'question');\n            const answers = parseInt(getRadioListValue('.answerTemplate input', '0'), 10); // Default\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const description = form.querySelector('.settingsDescription') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            const majorityType = parseInt(getRadioListValue('.majortyTypeSettings input', '1'), 10); // Default: simple majority\n            const resultsPublic = parseInt(getRadioListValue('.resultsPublicSettings input', '1'), 10); // Default: everyone\n            const votesPublic = parseInt(getRadioListValue('.votesPublicSettings input', '0'), 10); // Default: nobody\n            this.widget.createVoting(type, answers, title.value, description.value, assigned.value, majorityType, resultsPublic, votesPublic);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}