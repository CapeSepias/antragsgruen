{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","constructor","$element","this","element","createVueWidget","initVotingCreater","$","tooltip","vueEl","querySelector","voteSettingsUrl","getAttribute","voteCreateUrl","addableMotions","JSON","parse","pollUrl","votingInitJson","initUserGroups","widget","Vue","el","template","data","votingsJson","votings","userGroups","csrf","document","pollingId","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","setVotingFromJson","setVotingFromObject","setStatus","newStatus","organizations","op","status","map","orga","members_present","saveSettings","title","answerTemplate","majorityType","votePolicy","resultsPublic","votesPublic","assignedMotion","deleteVoting","createVoting","answers","specificQuestion","window","setTimeout","scrollintoview","top_offset","removeItem","itemType","itemId","addIMotion","itemDefinition","addQuestion","question","reloadData","get","console","error","startPolling","setInterval","beforeDestroy","clearInterval","created","initPolicyWidget","$widget","$select","find","selectize","$policySelect","on","parseInt","val","removeClass","addClass","trigger","opener","form","addEventListener","classList","remove","add","getRadioListValue","selector","defaultValue","querySelectorAll","input","checked","recalcQuestionListener","recalcAnswerTypeListener","ev","stopPropagation","preventDefault","assigned"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nconst POLICY_USER_GROUPS  = 6;\n\nexport class VotingAdmin {\n    private widget;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n        this.initVotingCreater();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const votingInitJson = this.element.getAttribute('data-voting');\n        const initUserGroups = JSON.parse(this.element.getAttribute('data-user-groups'));\n\n        this.widget = new Vue({\n            el: vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     :alreadyAddedItems=\"alreadyAddedItems\"\n                                     :userGroups=\"userGroups\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-imotion=\"addIMotion\"\n                                     @add-question=\"addQuestion\"\n                                     ref=\"voting-admin-widget\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votingsJson: null,\n                    votings: null,\n                    userGroups: initUserGroups,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                setStatus(votingBlockId, newStatus, organizations) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                        organizations: organizations.map(orga => { return {\n                            id: orga.id,\n                            members_present: orga.members_present,\n                        }}),\n                    });\n                },\n                saveSettings(votingBlockId, title, answerTemplate, majorityType, votePolicy, resultsPublic, votesPublic, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        answerTemplate,\n                        majorityType,\n                        votePolicy,\n                        resultsPublic,\n                        votesPublic,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (type, answers, title, specificQuestion, assignedMotion, majorityType, votePolicy, userGroups, resultsPublic, votesPublic) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        type,\n                        answers,\n                        title,\n                        specificQuestion,\n                        assignedMotion,\n                        majorityType,\n                        votePolicy,\n                        userGroups,\n                        resultsPublic,\n                        votesPublic\n                    };\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addIMotion(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-imotion',\n                        itemDefinition\n                    });\n                },\n                addQuestion(votingBlockId, question) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-question',\n                        question\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n\n        // Used by tests to control vue-select\n        window['votingAdminWidget'] = this.widget;\n    }\n\n    private initPolicyWidget() {\n        const $widget = $(this.element);\n        const $select: any = $widget.find('.userGroupSelect');\n        $select.find(\"select\").selectize({});\n\n        const $policySelect = $widget.find(\".policySelect\");\n        $policySelect.on(\"change\", () => {\n            if (parseInt($policySelect.val() as string, 10) === POLICY_USER_GROUPS) {\n                $select.removeClass(\"hidden\");\n            } else {\n                $select.addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder'),\n            specificQuestion = this.element.querySelector('.specificQuestion'),\n            majorityType = this.element.querySelector('.majorityTypeSettings');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n\n        const getRadioListValue = (selector: string, defaultValue: string) => {\n            let val = defaultValue;\n            form.querySelectorAll(selector).forEach(el => {\n                const input = el as HTMLInputElement;\n                if (input.checked) {\n                    val = input.value;\n                }\n            });\n            return val;\n        };\n\n        const recalcQuestionListener = () => {\n            if (getRadioListValue('.votingType input', 'question') === 'question') {\n                specificQuestion.classList.remove('hidden');\n            } else {\n                specificQuestion.classList.add('hidden');\n            }\n        };\n        form.querySelectorAll('.votingType input').forEach(el => {\n            el.addEventListener('change', recalcQuestionListener);\n        });\n        recalcQuestionListener();\n\n        const recalcAnswerTypeListener = () => {\n            if (getRadioListValue('.answerTemplate input', '0') === '2') {\n                majorityType.classList.add('hidden');\n            } else {\n                majorityType.classList.remove('hidden');\n\n            }\n        };\n        form.querySelectorAll('.answerTemplate input').forEach(el => {\n            el.addEventListener('change', recalcAnswerTypeListener);\n        });\n        recalcAnswerTypeListener();\n\n        this.initPolicyWidget();\n\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const type = getRadioListValue('.votingType input', 'question');\n            const answers = parseInt(getRadioListValue('.answerTemplate input', '0'), 10); // Default\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const specificQuestion = form.querySelector('.settingsQuestion') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            const majorityType = parseInt(getRadioListValue('.majorityTypeSettings input', '1'), 10); // Default: simple majority\n            const resultsPublic = parseInt(getRadioListValue('.resultsPublicSettings input', '1'), 10); // Default: everyone\n            const votesPublic = parseInt(getRadioListValue('.votesPublicSettings input', '0'), 10); // Default: nobody\n            const votePolicy = parseInt((form.querySelector('.policySelect') as HTMLSelectElement).value, 10);\n            let userGroups;\n            if (votePolicy === POLICY_USER_GROUPS) {\n                userGroups = (form.querySelector('.userGroupSelectList') as any).selectize.items.map(item => parseInt(item, 10));\n            } else {\n                userGroups = [];\n            }\n            this.widget.createVoting(type, answers, title.value, specificQuestion.value, assigned.value, majorityType, votePolicy, userGroups, resultsPublic, votesPublic);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}