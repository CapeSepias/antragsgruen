{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","[object Object]","$element","this","$vueEl","find","allVotingData","data","voteSettingsUrl","pollUrl","console","log","JSON","parse","stringify","widget","Vue","el","template","votings","csrf","$","attr","pollingId","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","newStatus","arguments","status","reloadData","get","error","startPolling","window","setInterval","clearInterval"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,iBAAc,ECC1BJ,EAAAI,YAAA,MAGIC,YAAoBC,GAAAC,KAAAD,SAAAA,EAChB,MAAME,EAASD,KAAKD,SAASG,KAAK,gBAAgB,GAC5CC,EAAgBJ,EAASK,KAAK,UAC9BC,EAAkBN,EAASK,KAAK,qBAChCE,EAAUP,EAASK,KAAK,YAE9BG,QAAQC,IAAIC,KAAKC,MAAMD,KAAKE,UAAUR,KACtCI,QAAQC,IAAIF,GAEZN,KAAKY,OAAS,IAAIC,IAAI,CAClBC,GAAIb,EACJc,SAAU,+QAMVX,KAAI,KACO,CACHY,QAASb,EACTc,KAAMC,EAAE,QAAQhB,KAAK,yBAAyBiB,KAAK,WACnDC,UAAW,OAGnBC,QAAS,CACLC,kBAAmB,SAAUC,EAAeC,GACxC,IAAIC,EAAW,CACXC,MAAO1B,KAAKiB,MAEZO,IACAC,EAAW/B,OAAOiC,OAAOF,EAAUD,IAEvC,MAAMZ,EAASZ,KACT4B,EAAMvB,EAAgBwB,QAAQ,gBAAiBN,GACrDL,EAAEY,KAAKF,EAAKH,GAAU,SAAUrB,QACP2B,IAAjB3B,EAAK4B,SAA0B5B,EAAK4B,SAIxCpB,EAAOI,QAAUZ,EACjBG,QAAQC,IAAI,WAAYJ,IAJpB6B,MAAM7B,EAAK8B,YAKhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBvC,UAAUyB,EAAee,GACrB/B,QAAQC,IAAI+B,WACZvC,KAAKsB,kBAAkBC,EAAe,CAClCiB,OAAQF,KAGhBG,WAAY,WACR,MAAM7B,EAASZ,KACfkB,EAAEwB,IAAIpC,GAAS,SAAUF,GACrBQ,EAAOI,QAAUZ,KAClB+B,OAAM,SAAUC,GACf7B,QAAQoC,MAAM,0CAA2CP,OAGjEQ,aAAc,WACV,MAAMhC,EAASZ,KACfA,KAAKoB,UAAYyB,OAAOC,aAAY,WAChClC,EAAO6B,eACR,OAGX3C,gBACI+C,OAAOE,cAAc/C,KAAKoB,YAE9BtB,UACIE,KAAK4C","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class VotingAdmin {\n    private widget;\n\n    constructor(private $element: JQuery) {\n        const $vueEl = this.$element.find(\".votingAdmin\")[0];\n        const allVotingData = $element.data('voting');\n        const voteSettingsUrl = $element.data('url-vote-settings');\n        const pollUrl = $element.data('url-poll');\n\n        console.log(JSON.parse(JSON.stringify(allVotingData)));\n        console.log(pollUrl);\n\n        this.widget = new Vue({\n            el: $vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     @set-status=\"setStatus\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votings: allVotingData,\n                    csrf: $(\"head\").find(\"meta[name=csrf-token]\").attr(\"content\") as string,\n                    pollingId: null\n                };\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                        console.log(\"returned\", data);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setStatus(votingBlockId, newStatus) {\n                    console.log(arguments);\n                    this._performOperation(votingBlockId, {\n                        status: newStatus\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.startPolling()\n            }\n        });\n    }\n}\n"]}