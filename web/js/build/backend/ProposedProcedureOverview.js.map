{"version":3,"sources":["backend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","interval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","ev","preventDefault","$","currentTarget","next","removeClass","prototype","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","_this","openWriting","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","text","html","skipReload","length","reload","console","log","get","updateUrl","success","$dateField","date","$proposalList","error","startInterval","window","setInterval","stopInterval","clearInterval","$updateWidget","$toggle","change","trigger","exports"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val();\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            let $comment = $commentTd.find('.currentComment');\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('empty');\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.comment.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload() {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active')\n            return;\n        }\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}