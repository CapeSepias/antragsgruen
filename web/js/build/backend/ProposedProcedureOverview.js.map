{"version":3,"sources":["backend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","interval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","onContentUpdated","ResponsibilitySetter_1","ResponsibilitySetter","$","ev","preventDefault","currentTarget","next","removeClass","prototype","each","i","el","scrollTop","scrollHeight","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","_this","openWriting","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","clone","text","html","insertBefore","window","setTimeout","skipReload","length","reload","console","log","get","updateUrl","success","$dateField","date","$proposalList","error","startInterval","setInterval","stopInterval","clearInterval","$updateWidget","$toggle","change","trigger","exports"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":["import { ResponsibilitySetter } from './ResponsibilitySetter';\n\ninterface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n        this.onContentUpdated();\n\n        new ResponsibilitySetter($('.proposedProcedureReloadHolder'));\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onContentUpdated() {\n        this.$widget.find(\".commentList\").each((i, el) => {\n            el.scrollTop = el.scrollHeight;\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('click', '.cancelWriting', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).parents('td').first().removeClass('writing');\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            let $comment = $commentTd.find('.template').clone();\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('template');\n            $comment.insertBefore($commentTd.find('.template'));\n            window.setTimeout(() => {\n                $commentTd.find(\".commentList\")[0].scrollTop = $commentTd.find(\".commentList\")[0].scrollHeight;\n            }, 1);\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.respHolder.dropdown.open').length > 0) {\n            return true;\n        } else if (this.$widget.find('.comment.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload() {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active');\n            return;\n        }\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n            this.onContentUpdated();\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}