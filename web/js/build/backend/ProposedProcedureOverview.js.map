{"version":3,"sources":["backend/ProposedProcedureOverview.js","backend/ProposedProcedureOverview.ts"],"names":["define","require","exports","ResponsibilitySetter_1","Object","defineProperty","value","ProposedProcedureOverview","[object Object]","$widget","this","plannedInterval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","onContentUpdated","ResponsibilitySetter","$","ev","preventDefault","currentTarget","next","removeClass","each","i","el","scrollTop","scrollHeight","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","openWriting","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","clone","text","html","insertBefore","window","setTimeout","length","cb","skipReload","console","log","ajax","type","url","updateUrl","success","$dateField","date","$proposalList","error","reload","executeInterval","clearTimeout","$updateWidget","$toggle","startInterval","stopInterval","trigger"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":[null,"import { ResponsibilitySetter } from './ResponsibilitySetter';\n\ninterface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private plannedInterval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n        this.onContentUpdated();\n\n        new ResponsibilitySetter($('.proposedProcedureReloadHolder'));\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onContentUpdated() {\n        this.$widget.find(\".commentList\").each((i, el) => {\n            el.scrollTop = el.scrollHeight;\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('click', '.cancelWriting', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).parents('td').first().removeClass('writing');\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n            let $comment = $commentTd.find('.template').clone();\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('template');\n            $comment.insertBefore($commentTd.find('.template'));\n            window.setTimeout(() => {\n                $commentTd.find(\".commentList\")[0].scrollTop = $commentTd.find(\".commentList\")[0].scrollHeight;\n            }, 1);\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.respHolder.dropdown.open').length > 0) {\n            return true;\n        } else if (this.$widget.find('.comments.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload(cb) {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active');\n            cb();\n            return;\n        }\n        $.ajax({\n            type: \"GET\",\n            url: this.updateUrl,\n            success: (data: ReloadResult) => {\n                if (!data.success) {\n                    if (data.error) {\n                        alert(data.error);\n                    }\n                    return;\n                }\n                this.$dateField.text(data.date);\n                this.$proposalList.html(data.html);\n                this.onContentUpdated();\n\n                cb();\n            },\n            error: () => {\n                cb();\n            }\n        })\n    }\n\n    private executeInterval() {\n        this.reload(() => {\n            this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n        });\n    }\n\n    private startInterval() {\n        if (this.plannedInterval !== null) {\n            return;\n        }\n        this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.plannedInterval === null) {\n            return;\n        }\n        window.clearTimeout(this.plannedInterval);\n        this.plannedInterval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload(() => {});\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}