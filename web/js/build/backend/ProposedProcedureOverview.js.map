{"version":3,"sources":["backend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","interval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","prototype","ev","$checkbox","$","currentTarget","data","_csrf","visible","prop","id","parents","first","post","ret","alert","_this","openWriting","preventDefault","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","text","html","removeClass","skipReload","length","reload","console","log","get","updateUrl","success","$dateField","date","$proposalList","error","startInterval","window","setInterval","stopInterval","clearInterval","$updateWidget","$toggle","change","trigger","exports"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val();\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            let $comment = $commentTd.find('.currentComment');\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('empty');\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.comment.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload() {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active')\n            return;\n        }\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}