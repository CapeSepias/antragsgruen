{"version":3,"sources":["backend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","csrf","find","val","on","onVisibleChanged","bind","initComments","prototype","ev","$checkbox","$","currentTarget","data","_csrf","visible","prop","id","parents","first","post","ret","console","log","alert","_this","openWriting","preventDefault","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","text","html","removeClass","exports"],"mappings":"yGAAA,IAAAA,EAAA,WAGI,SAAAA,EAAoBC,GAAAC,KAAAD,QAAAA,EAChBC,KAAKC,KAAOD,KAAKD,QAAQG,KAAK,qBAAqBC,MACnDH,KAAKD,QAAQK,GAAG,SAAU,sBAAuBJ,KAAKK,iBAAiBC,KAAKN,OAC5EA,KAAKO,eAmEb,OAhEYT,EAAAU,UAAAH,iBAAR,SAAyBI,GACrB,IAAIC,EAAYC,EAAEF,EAAGG,eAEjBC,GACAC,MAASd,KAAKC,KACdc,QAAYL,EAAUM,KAAK,WAAa,EAAI,EAC5CC,GAAMP,EAAUQ,QAAQ,SAASC,QAAQN,KAAK,OAElDF,EAAES,KAAKV,EAAUG,KAAK,YAAaA,EAAM,SAACQ,GACjCA,EAAa,QAIlBC,QAAQC,IAAI,SAHRC,MAAMH,EAAW,UAOrBvB,EAAAU,UAAAD,aAAR,WAAA,IAAAkB,EAAAzB,KACIA,KAAKD,QAAQK,GAAG,QAAS,iBAAkBJ,KAAK0B,YAAYpB,KAAKN,OAEjEA,KAAKD,QAAQK,GAAG,QAAS,iBAAkB,SAACK,GACxCA,EAAGkB,iBACH,IAAIC,EAAOjB,EAAEF,EAAGG,eAChBa,EAAKI,cAAcD,EAAKV,QAAQ,MAAMC,WAG1CnB,KAAKD,QAAQK,GAAG,WAAY,WAAY,SAACK,GACrC,GAAIA,EAAGqB,cAAuB,SAAqC,KAAhCrB,EAAGqB,cAAuB,QAAU,CACnE,IAAIC,EAAYpB,EAAEF,EAAGG,eACrBa,EAAKI,cAAcE,EAAUb,QAAQ,MAAMC,aAK/CrB,EAAAU,UAAAkB,YAAR,SAAoBjB,GAChBA,EAAGkB,iBACH,IACIK,EADOrB,EAAEF,EAAGG,eACDM,QAAQ,MAAMC,QAE7Ba,EAAIC,SAAS,WACbD,EAAI9B,KAAK,YAAYgC,SAGjBpC,EAAAU,UAAAqB,cAAR,SAAsBM,GAClB,IAAItB,GACAC,MAASd,KAAKC,KACdmC,QAAWD,EAAWjC,KAAK,YAAYC,MACvCc,GAAMkB,EAAWjB,QAAQ,SAASL,KAAK,OAE3CF,EAAES,KAAKe,EAAWtB,KAAK,YAAaA,EAAM,SAACQ,GACvC,GAAKA,EAAa,QAAlB,CAIA,IAAIgB,EAAWF,EAAWjC,KAAK,mBAC/BmC,EAASnC,KAAK,SAASoC,KAAKjB,EAAc,UAC1CgB,EAASnC,KAAK,SAASoC,KAAKjB,EAAc,UAC1CgB,EAASnC,KAAK,YAAYqC,KAAKlB,EAAU,MACzCgB,EAASG,YAAY,SAErBL,EAAWjC,KAAK,YAAYC,IAAI,IAChCgC,EAAWK,YAAY,gBAVnBhB,MAAMH,EAAW,UAajCvB,EAzEA,GAAa2C,EAAA3C,0BAAAA","file":"ProposedProcedureOverview.js","sourcesContent":["export class ProposedProcedureOverview {\n    private csrf: string;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val();\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            console.log('Saved');\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            let $comment = $commentTd.find('.currentComment');\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('empty');\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n}"]}