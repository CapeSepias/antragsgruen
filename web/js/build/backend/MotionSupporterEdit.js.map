{"version":3,"sources":["backend/MotionSupporterEdit.ts"],"names":["MotionSupporterEdit","$supporterHolder","this","$sortable","find","length","Sortable","create","draggable","$","click","ev","append","data","preventDefault","on","parents","first","remove","$fullTextHolder","lines","val","split","template","getNewElement","$rows","i","$row","eq","$newEl","$firstAffectedRow","parts","name_1","shift","trim","orga","children","selectlist","select","focus","scrollintoview","$copier","clipboard","ClipboardJS","text","supporters","each","el","$el","push","replace","gender","value","join","addClass","window","setTimeout","removeClass","alert","tooltip","exports"],"mappings":"yGAGA,IAAAA,EACI,SAAoBC,GAAAC,KAAAD,iBAAAA,EAChB,IAAIE,EAAYD,KAAKD,iBAAiBG,KAAK,QACpB,EAAnBD,EAAUE,QACVC,SAASC,OAAOJ,EAAU,GAAI,CAACK,UAAW,OAG9CC,EAAE,sBAAsBC,MAAM,SAAUC,GACpCR,EAAUS,OAAOH,EAAEP,MAAMW,KAAK,YAC9BF,EAAGG,mBAEPX,EAAUY,GAAG,QAAS,gBAAiB,SAAUJ,GAC7CA,EAAGG,iBACHL,EAAEP,MAAMc,QAAQ,MAAMC,QAAQC,WAGlC,IAAIC,EAAkBV,EAAE,mBACxBR,EAAiBG,KAAK,gBAAgBM,MAAM,WAexC,IAdA,IAAIU,EAAQD,EAAgBf,KAAK,YAAYiB,MAAMC,MAAM,KACrDC,EAAWd,EAAE,sBAAsBI,KAAK,WACxCW,EAAgB,WAEZ,IADA,IAAIC,EAAQtB,EAAUC,KAAK,QAClBsB,EAAI,EAAGA,EAAID,EAAMpB,OAAQqB,IAAK,CACnC,IAAIC,EAAOF,EAAMG,GAAGF,GACpB,GAAyC,IAArCC,EAAKvB,KAAK,kBAAkBiB,OAAoD,IAArCM,EAAKvB,KAAK,kBAAkBiB,MAAa,OAAOM,EAGnG,IAAIE,EAASpB,EAAEc,GAEf,OADApB,EAAUS,OAAOiB,GACVA,GAEXC,EAAoB,KACfJ,EAAI,EAAGA,EAAIN,EAAMf,OAAQqB,IAC9B,GAAgB,IAAZN,EAAMM,GAAV,CAGA,IAAIG,EAASL,IACY,MAArBM,IAA2BA,EAAoBD,GACnD,IAAIE,EAAQX,EAAMM,GAAGJ,MAAM,KAEvBU,EAAOD,EAAME,QAGjB,GAFAJ,EAAOzB,KAAK,uBAAuBiB,IAAIW,EAAKE,QAEI,EAA5CL,EAAOzB,KAAK,uBAAuBC,QAA6B,EAAf0B,EAAM1B,OAAY,CACnE,IAAI8B,EAAOJ,EAAME,QACjBJ,EAAOzB,KAAK,uBAAuBiB,IAAIc,EAAKD,QAET,EAAnCL,EAAOzB,KAAK,cAAcC,QAA6B,EAAf0B,EAAM1B,QAC9CwB,EAAOzB,KAAK,cAAca,QAAQmB,WAAWC,WAAW,gBAAiBN,EAAM,IAGvFZ,EAAgBf,KAAK,YAAYkC,SAASC,QAC1CT,EAAkBU,mBAGtB,IAAMC,EAAUxC,EAAiBG,KAAK,iBAChCsC,EAAY,IAAIC,YAAYF,EAAQ,GAAI,CAC1CG,KAAM,WACF,IAAIC,EAAa,GAgBjB,OAfA5C,EAAiBG,KAAK,iBAAiB0C,KAAK,SAACpB,EAAGqB,GAC5C,IAAIC,EAAMvC,EAAEsC,GACRhB,EAAQ,GAOZ,GANIiB,EAAI5C,KAAK,kBAAkBC,QAC3B0B,EAAMkB,KAAKD,EAAI5C,KAAK,kBAAkBiB,MAAM6B,QAAQ,IAAK,KAAKA,QAAQ,IAAK,MAE3EF,EAAI5C,KAAK,kBAAkBC,QAC3B0B,EAAMkB,KAAKD,EAAI5C,KAAK,kBAAkBiB,MAAM6B,QAAQ,IAAK,KAAKA,QAAQ,IAAK,MAE3EF,EAAI5C,KAAK,cAAcC,OAAQ,CAC/B,IAAI8C,EAAcH,EAAI5C,KAAK,cAAca,QAAQmB,WACjDL,EAAMkB,KAAKE,EAAOd,WAAW,YAAYe,OAE7CP,EAAWI,KAAKlB,EAAMsB,KAAK,QAExBR,EAAWQ,KAAK,QAG/BX,EAAU3B,GAAG,UAAW,WACpB0B,EAAQa,SAAS,QACjBC,OAAOC,WAAW,WACdf,EAAQgB,YAAY,SACrB,OAGPf,EAAU3B,GAAG,QAAS,WAClB2C,MAAM,6CAGVjD,EAAE,2BAA2BkD,WAxFxBC,EAAA5D,oBAAAA","file":"MotionSupporterEdit.js","sourcesContent":["declare let Sortable: any;\ndeclare let ClipboardJS: any;\n\nexport class MotionSupporterEdit {\n    constructor(private $supporterHolder: JQuery) {\n        let $sortable = this.$supporterHolder.find(\"> ul\");\n        if ($sortable.length > 0) {\n            Sortable.create($sortable[0], {draggable: 'li'});\n        }\n\n        $(\".supporterRowAdder\").click(function (ev) {\n            $sortable.append($(this).data(\"content\"));\n            ev.preventDefault();\n        });\n        $sortable.on(\"click\", \".delSupporter\", function (ev) {\n            ev.preventDefault();\n            $(this).parents(\"li\").first().remove();\n        });\n\n        let $fullTextHolder = $(\"#fullTextHolder\");\n        $supporterHolder.find(\".fullTextAdd\").click(() => {\n            let lines = $fullTextHolder.find('textarea').val().split(\";\"),\n                template = $(\".supporterRowAdder\").data(\"content\"),\n                getNewElement = function () {\n                    let $rows = $sortable.find(\"> li\");\n                    for (let i = 0; i < $rows.length; i++) {\n                        let $row = $rows.eq(i);\n                        if ($row.find(\".supporterName\").val() == '' && $row.find(\".supporterOrga\").val() == '') return $row;\n                    }\n                    // No empty row found\n                    let $newEl = $(template);\n                    $sortable.append($newEl);\n                    return $newEl;\n                };\n            let $firstAffectedRow = null;\n            for (let i = 0; i < lines.length; i++) {\n                if (lines[i] == '') {\n                    continue;\n                }\n                let $newEl = getNewElement();\n                if ($firstAffectedRow == null) $firstAffectedRow = $newEl;\n                let parts = lines[i].split(',');\n\n                let name = parts.shift();\n                $newEl.find('input.supporterName').val(name.trim());\n\n                if ($newEl.find('input.supporterOrga').length > 0 && parts.length > 0) {\n                    let orga = parts.shift();\n                    $newEl.find('input.supporterOrga').val(orga.trim());\n                }\n                if ($newEl.find('.colGender').length > 0 && parts.length > 0) {\n                    $newEl.find('.colGender').first().children().selectlist(\"selectByValue\", parts[0]);\n                }\n            }\n            $fullTextHolder.find('textarea').select().focus();\n            $firstAffectedRow.scrollintoview();\n        });\n\n        const $copier = $supporterHolder.find(\".fullTextCopy\");\n        const clipboard = new ClipboardJS($copier[0], {\n            text: function () {\n                let supporters = [];\n                $supporterHolder.find('.supporterRow').each((i, el) => {\n                    let $el = $(el),\n                        parts = [];\n                    if ($el.find(\".supporterName\").length) {\n                        parts.push($el.find(\".supporterName\").val().replace(/,/, ' ').replace(/;/, ' '));\n                    }\n                    if ($el.find(\".supporterOrga\").length) {\n                        parts.push($el.find(\".supporterOrga\").val().replace(/,/, ' ').replace(/;/, ' '));\n                    }\n                    if ($el.find(\".colGender\").length) {\n                        let gender: any = $el.find(\".colGender\").first().children();\n                        parts.push(gender.selectlist(\"getValue\").value);\n                    }\n                    supporters.push(parts.join(','));\n                });\n                return supporters.join(\";\");\n            }\n        });\n        clipboard.on('success', () => {\n            $copier.addClass(\"done\");\n            window.setTimeout(() => {\n                $copier.removeClass(\"done\");\n            }, 1000);\n        });\n\n        clipboard.on('error', () => {\n            alert(\"Could not copy the URL to the clipboard\");\n        });\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n}\n"]}