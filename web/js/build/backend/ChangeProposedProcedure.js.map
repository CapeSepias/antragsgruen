{"version":3,"sources":["backend/ChangeProposedProcedure.ts"],"names":["ChangeProposedProcedure","$widget","this","savingComment","initElements","initOpener","initStatusSetter","initCommentForm","initVotingBlock","initExplanation","on","ev","preventDefault","prototype","$statusDetails","find","$visibilityInput","$votingStatusInput","$votingBlockId","$openerBtn","$","context","data","saveUrl","attr","csrf","val","_this","removeClass","addClass","localStorage","setItem","getItem","reinitAfterReload","statusChanged","commentsScrollBottom","selectlist","setGlobalProposedStr","html","performCallWithReload","post","ret","$content","children","remove","append","window","setTimeout","alert","fail","notifyProposer","text","fromName","replyTo","setPropserHasAccepted","confirm","bootbox","result","setProposerHasAccepted","sendAgain","saveStatus","newVal","setStatus","visible","prop","votingBlockId","length","filter","parseInt","toString","currentTarget","init","trigger","parents","bind","target","$commentList","scrollTop","scrollHeight","doSaveComment","$commentWidget","writeComment","_csrf","success","delHtml","comment","delLink","$comment","dateFormatted","username","id","JSON","stringify","delComment","originalEvent","first","exports"],"mappings":"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","file":"ChangeProposedProcedure.js","sourcesContent":["const STATUS_REFERRED = 10;\nconst STATUS_VOTE = 11;\nconst STATUS_OBSOLETED_BY = 22;\nconst STATUS_CUSTOM_STRING = 23;\n\nexport class ChangeProposedProcedure {\n    private $openerBtn: JQuery;\n    private $statusDetails: JQuery;\n    private $visibilityInput: JQuery;\n    private $votingStatusInput: JQuery;\n    private $votingBlockId: JQuery;\n    private saveUrl: string;\n    private context: string;\n    private csrf: string;\n    private savingComment: boolean = false;\n\n    constructor(private $widget: JQuery) {\n        this.initElements();\n        this.initOpener();\n        this.initStatusSetter();\n        this.initCommentForm();\n        this.initVotingBlock();\n        this.initExplanation();\n        $widget.on(\"submit\", ev => ev.preventDefault());\n    }\n\n    private initElements() {\n        this.$statusDetails = this.$widget.find('.statusDetails');\n        this.$visibilityInput = this.$widget.find('input[name=proposalVisible]');\n        this.$votingStatusInput = this.$widget.find('input[name=votingStatus]');\n        this.$votingBlockId = this.$widget.find('input[name=votingBlockId]');\n        this.$openerBtn = $('.proposedChangesOpener button');\n        this.context = this.$widget.data('context');\n        this.saveUrl = this.$widget.attr('action');\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n    }\n\n    private initOpener() {\n        this.$openerBtn.on('click', () => {\n            this.$widget.removeClass('hidden');\n            this.$openerBtn.addClass('hidden');\n            localStorage.setItem('proposed_procedure_enabled', '1');\n        });\n        this.$widget.on('click', '.closeBtn', () => {\n            this.$widget.addClass('hidden');\n            this.$openerBtn.removeClass('hidden');\n            localStorage.setItem('proposed_procedure_enabled', '0');\n        });\n\n        if (localStorage.getItem('proposed_procedure_enabled') === '1') {\n            this.$widget.removeClass('hidden');\n            this.$openerBtn.addClass('hidden');\n        } else {\n            this.$widget.addClass('hidden');\n        }\n    }\n\n    private reinitAfterReload() {\n        this.initElements();\n        this.statusChanged();\n        this.commentsScrollBottom();\n        this.initExplanation();\n        this.$widget.find('.newBlock').addClass('hidden');\n        this.$widget.find('.selectlist').selectlist();\n        this.$widget.find('.notifyProposerSection').addClass('hidden');\n    }\n\n    private setGlobalProposedStr(html: string) {\n        $(\".motionData .proposedStatusRow .str\").html(html);\n    }\n\n    private performCallWithReload(data: object) {\n        data['_csrf'] = this.csrf;\n\n        $.post(this.saveUrl, data, (ret) => {\n            if (ret['success']) {\n                let $content = $(ret['html']);\n                this.$widget.children().remove();\n                this.$widget.append($content.children());\n                this.reinitAfterReload();\n                this.$widget.addClass('showSaved').removeClass('isChanged');\n                if (ret['proposalStr']) {\n                    this.setGlobalProposedStr(ret['proposalStr']);\n                }\n                window.setTimeout(() => this.$widget.removeClass('showSaved'), 2000);\n            } else if (ret['error']) {\n                alert(ret['error']);\n            } else {\n                alert('An error occurred');\n            }\n        }).fail(() => {\n            alert('Could not save');\n        });\n    }\n\n    private notifyProposer() {\n        const text = this.$widget.find('textarea[name=proposalNotificationText]').val(),\n            fromName = this.$widget.find('input[name=proposalNotificationFrom]').val(),\n            replyTo = this.$widget.find('input[name=proposalNotificationReply]').val();\n        this.performCallWithReload({\n            'notifyProposer': '1',\n            'text': text,\n            'fromName': fromName,\n            'replyTo': replyTo,\n        });\n    }\n\n    private setPropserHasAccepted() {\n        const confirm = this.$widget.find('.setConfirmation').data('msg');\n        bootbox.confirm(confirm, (result) => {\n            if (result) {\n                this.performCallWithReload({\n                    'setProposerHasAccepted': '1',\n                });\n            }\n        });\n    }\n\n    private sendAgain() {\n        const confirm = this.$widget.find('.sendAgain').data('msg');\n        bootbox.confirm(confirm, (result) => {\n            if (result) {\n                this.performCallWithReload({\n                    'sendAgain': '1',\n                });\n            }\n        });\n    }\n\n    private saveStatus() {\n        let newVal = this.$widget.find('.statusForm input[type=radio]:checked').val();\n        let data = {\n            setStatus: newVal,\n            visible: (this.$visibilityInput.prop('checked') ? 1 : 0),\n            votingBlockId: this.$votingBlockId.val(),\n        };\n\n        if (newVal == STATUS_REFERRED) {\n            data['proposalComment'] = this.$widget.find('input[name=referredTo]').val();\n        }\n        if (newVal == STATUS_OBSOLETED_BY) {\n            if (this.$widget.find('input[name=obsoletedByAmendment]').length > 0) {\n                data['proposalComment'] = this.$widget.find('input[name=obsoletedByAmendment]').val();\n            } else {\n                data['proposalComment'] = this.$widget.find('input[name=obsoletedByMotion]').val();\n            }\n        }\n        if (newVal == STATUS_CUSTOM_STRING) {\n            data['proposalComment'] = this.$widget.find('input[name=statusCustomStr]').val();\n        }\n        if (newVal == STATUS_VOTE) {\n            data['votingStatus'] = this.$votingStatusInput.filter(':checked').val();\n        }\n        if (data.votingBlockId == 'NEW') {\n            data['votingBlockTitle'] = this.$widget.find('input[name=newBlockTitle]').val();\n        }\n\n        if (this.$widget.find('input[name=setPublicExplanation]').prop('checked')) {\n            data['proposalExplanation'] = this.$widget.find('textarea[name=proposalExplanation]').val();\n        }\n\n        this.performCallWithReload(data);\n    }\n\n    private statusChanged() {\n        let newVal = parseInt(this.$widget.find('.statusForm input[type=radio]:checked').val() as string, 10);\n        this.$statusDetails.addClass('hidden');\n        this.$statusDetails.filter('.status_' + newVal.toString(10)).removeClass('hidden');\n        if (newVal === 0) {\n            this.$widget.addClass('noStatus');\n        } else {\n            this.$widget.removeClass('noStatus');\n        }\n        if (newVal === STATUS_OBSOLETED_BY) {\n            // this operation takes a long time, so we only do it when actually needed\n            this.$widget.find('#obsoletedByAmendment').selectlist();\n        }\n    }\n\n    private initStatusSetter() {\n        this.$widget.on('change', '.statusForm input[type=radio]', (ev, data) => {\n            if (!$(ev.currentTarget).prop('checked')) {\n                return;\n            }\n            this.statusChanged();\n            if (data && data.init === true) {\n                return;\n            }\n            this.$widget.addClass('isChanged');\n        });\n        this.$widget.find('.statusForm input[type=radio]').trigger('change', {'init': true});\n\n        this.$widget.on('change keyup', 'input, textarea', (ev) => {\n            if ($(ev.currentTarget).parents('.proposalCommentForm').length > 0) { // The comment textfield\n                return;\n            }\n            this.$widget.addClass('isChanged');\n        });\n\n        this.$widget.on('changed.fu.selectlist', '#obsoletedByAmendment', () => {\n            this.$widget.addClass('isChanged');\n        });\n\n        this.$widget.on('click', '.saving button', this.saveStatus.bind(this));\n\n        this.$widget.on('click', '.notifyProposer', () => {\n            this.$widget.find('.notifyProposerSection').removeClass('hidden');\n        });\n        this.$widget.on('click', '.setConfirmation', this.setPropserHasAccepted.bind(this));\n        this.$widget.on('click', '.sendAgain', this.sendAgain.bind(this));\n        this.$widget.on('click', 'button[name=notificationSubmit]', this.notifyProposer.bind(this));\n    }\n\n    private initVotingBlock() {\n        this.$widget.on('changed.fu.selectlist', '#votingBlockId', () => {\n            this.$widget.addClass('isChanged');\n            if (this.$votingBlockId.val() == 'NEW') {\n                this.$widget.find(\".newBlock\").removeClass('hidden');\n            } else {\n                this.$widget.find(\".newBlock\").addClass('hidden');\n            }\n        });\n        this.$widget.find('.newBlock').addClass('hidden');\n    }\n\n    private initExplanation() {\n        this.$widget.find('input[name=setPublicExplanation]').on('change', (ev) => {\n            if ($(ev.target).prop('checked')) {\n                this.$widget.find('section.publicExplanation').removeClass('hidden');\n            } else {\n                this.$widget.find('section.publicExplanation').addClass('hidden');\n            }\n        });\n        if (this.$widget.find('input[name=setPublicExplanation]').prop('checked')) {\n            this.$widget.find('section.publicExplanation').removeClass('hidden');\n        } else {\n            this.$widget.find('section.publicExplanation').addClass('hidden');\n        }\n    }\n\n    private commentsScrollBottom() {\n        let $commentList = this.$widget.find('.proposalCommentForm .commentList');\n        $commentList[0].scrollTop = $commentList[0].scrollHeight;\n    }\n\n    private doSaveComment() {\n        let $commentWidget = this.$widget.find('.proposalCommentForm'),\n            $commentList = $commentWidget.find('.commentList'),\n            text = $commentWidget.find('textarea').val();\n\n        if (text == '' || this.savingComment) {\n            return;\n        }\n\n        this.savingComment = true;\n        $.post(this.saveUrl, {\n            writeComment: text,\n            _csrf: this.csrf\n        }, (ev) => {\n            if (ev.success) {\n                let delHtml = '';\n                if (ev.comment.delLink) {\n                    delHtml = '<button type=\"button\" data-url=\"' + ev.comment.delLink + '\" class=\"btn-link delComment\">';\n                    delHtml += '<span class=\"glyphicon glyphicon-trash\"></span></button>';\n                }\n                let $comment = $('<li class=\"comment\"><div class=\"header\"><div class=\"date\"></div>' + delHtml + '<div class=\"name\"></div></div><div class=\"comment\"></div></li>');\n                $comment.find('.date').text(ev.comment.dateFormatted);\n                $comment.find('.name').text(ev.comment.username);\n                $comment.find('.comment').text(ev.comment.text);\n                $comment.data('id', ev.comment.id);\n                $commentList.append($comment);\n                $commentWidget.find('textarea').val('');\n                $commentList[0].scrollTop = $commentList[0].scrollHeight;\n            } else {\n                alert('Could not save: ' + JSON.stringify(ev));\n            }\n            this.savingComment = false;\n        }).fail(() => {\n            alert('Could not save');\n            this.savingComment = false;\n        });\n    }\n\n    private delComment($comment: JQuery) {\n        $.post($comment.find(\".delComment\").data(\"url\"), {\n            \"_csrf\": this.csrf,\n            \"id\": $comment.data(\"id\"),\n        }, (ret) => {\n            if (ret['success']) {\n                $comment.remove();\n            } else {\n                alert(\"Error: \" + ret['error']);\n            }\n        });\n    }\n\n    private initCommentForm() {\n        this.$widget.on('click', '.proposalCommentForm button', () => {\n            this.doSaveComment();\n        });\n        this.commentsScrollBottom();\n\n        this.$widget.on('keypress', '.proposalCommentForm textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                this.doSaveComment();\n            }\n        });\n\n        this.$widget.on('click', '.delComment', (ev) => {\n            this.delComment($(ev.currentTarget).parents(\".comment\").first());\n        });\n    }\n}\n"]}