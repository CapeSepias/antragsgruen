{"version":3,"sources":["backend/ProcedureComment.ts"],"names":["ProcedureComment","$widget","_this","this","csrf","find","val","$form","click","openWriting","bind","submit","submitComment","keypress","ev","originalEvent","prototype","addClass","focus","preventDefault","data","_csrf","comment","id","$","post","attr","ret","$comment","text","html","removeClass","alert","exports"],"mappings":"yGAAA,IAAAA,EAAA,WAII,SAAAA,EAAoBC,GAApB,IAAAC,EAAAC,KAAoBA,KAAAF,QAAAA,EAChBE,KAAKC,KAAOD,KAAKF,QAAQI,KAAK,qBAAqBC,MACnDH,KAAKI,MAAQJ,KAAKF,QAAQI,KAAK,QAC/BF,KAAKF,QAAQI,KAAK,kBAAkBG,MAAML,KAAKM,YAAYC,KAAKP,OAChEA,KAAKI,MAAMI,OAAOR,KAAKS,cAAcF,KAAKP,OAE1CA,KAAKF,QAAQI,KAAK,YAAYQ,SAAS,SAACC,GAChCA,EAAGC,cAAuB,SAAqC,KAAhCD,EAAGC,cAAuB,SACzDb,EAAKU,cAAcE,KAgCnC,OA3BYd,EAAAgB,UAAAP,YAAR,WACIN,KAAKF,QAAQgB,SAAS,WACtBd,KAAKF,QAAQI,KAAK,YAAYa,SAG1BlB,EAAAgB,UAAAJ,cAAR,SAAsBE,GAAtB,IAAAZ,EAAAC,KACIW,EAAGK,iBACH,IAAIC,GACAC,MAASlB,KAAKC,KACdkB,QAAWnB,KAAKF,QAAQI,KAAK,YAAYC,MACzCiB,GAAMpB,KAAKI,MAAMa,KAAK,OAE1BI,EAAEC,KAAKtB,KAAKI,MAAMmB,KAAK,UAAWN,EAAM,SAACO,GACrC,GAAKA,EAAa,QAAlB,CAIA,IAAIC,EAAW1B,EAAKD,QAAQI,KAAK,mBACjCuB,EAASvB,KAAK,SAASwB,KAAKF,EAAc,UAC1CC,EAASvB,KAAK,SAASwB,KAAKF,EAAc,UAC1CC,EAASvB,KAAK,YAAYyB,KAAKH,EAAU,MACzCC,EAASG,YAAY,SAErB7B,EAAKD,QAAQI,KAAK,YAAYC,IAAI,IAClCJ,EAAKD,QAAQ8B,YAAY,gBAVrBC,MAAML,EAAa,YAanC3B,EA5CA,GAAaiC,EAAAjC,iBAAAA","file":"ProcedureComment.js","sourcesContent":["export class ProcedureComment {\n    private csrf: string;\n    private $form: JQuery;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val();\n        this.$form = this.$widget.find('form');\n        this.$widget.find('.writingOpener').click(this.openWriting.bind(this));\n        this.$form.submit(this.submitComment.bind(this));\n\n        this.$widget.find('textarea').keypress((ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                this.submitComment(ev);\n            }\n        })\n    }\n\n    private openWriting() {\n        this.$widget.addClass('writing');\n        this.$widget.find('textarea').focus();\n    }\n\n    private submitComment(ev) {\n        ev.preventDefault();\n        let data = {\n            '_csrf': this.csrf,\n            'comment': this.$widget.find('textarea').val(),\n            'id': this.$form.data('id'),\n        };\n        $.post(this.$form.attr('action'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['message']);\n                return;\n            }\n            let $comment = this.$widget.find('.currentComment');\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('empty');\n\n            this.$widget.find('textarea').val('');\n            this.$widget.removeClass('writing');\n        });\n    }\n}\n"]}