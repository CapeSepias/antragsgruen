{"version":3,"sources":["backend/UserAdmin.js","backend/UserAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","UserAdmin","constructor","$element","this","element","createVueWidget","$","tooltip","vueEl","querySelector","userSaveUrl","getAttribute","initUsersJson","initGroupsJson","pollUrl","widget","Vue","el","template","data","usersJson","users","groupsJson","groups","csrf","document","pollingId","computed","methods","_performOperation","additionalProps","postData","_csrf","assign","post","undefined","success","setUserGroups","alert","message","catch","err","responseText","saveUserGroups","user","op","userId","id","JSON","stringify","reloadData","get","console","error","startPolling","window","setInterval","beforeDestroy","clearInterval","created","parse"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,eAAY,ECCxBJ,EAAAI,UAAA,MAIIC,YAAYC,GACRC,KAAKC,QAAUF,EAAS,GACxBC,KAAKE,kBAELC,EAAE,2BAA2BC,UAGzBF,kBACJ,MAAMG,EAAQL,KAAKC,QAAQK,cAAc,cACnCC,EAAcP,KAAKC,QAAQO,aAAa,sBACxCC,EAAgBT,KAAKC,QAAQO,aAAa,cAC1CE,EAAiBV,KAAKC,QAAQO,aAAa,eAC3CG,EAAUX,KAAKC,QAAQO,aAAa,iBAE1CR,KAAKY,OAAS,IAAIC,IAAI,CAClBC,GAAIT,EACJU,SAAU,qQAMVC,KAAI,KACO,CACHC,UAAW,KACXC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,KAAMC,SAAShB,cAAc,8BAA8BE,aAAa,WACxEe,UAAW,OAGnBC,SAAU,GAEVC,QAAS,CACLC,kBAAmB,SAAUC,GACzB,IAAIC,EAAW,CACXC,MAAO7B,KAAKqB,MAEhBO,EAAWlC,OAAOoC,OAAOF,EAAUD,GACnC,MAAMf,EAASZ,KACfG,EAAE4B,KAAKxB,EAAaqB,GAAU,SAAUZ,QACfgB,IAAjBhB,EAAKiB,SAA0BjB,EAAKiB,QAIxCrB,EAAOsB,cAAclB,EAAKE,MAAOF,EAAKI,QAHlCe,MAAMnB,EAAKoB,YAIhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBC,eAAeC,EAAMrB,GACjBpB,KAAK0B,kBAAkB,CACnBgB,GAAI,mBACJC,OAAQF,EAAKG,GACbxB,OAAAA,KAGRc,cAAchB,EAAOE,GACjB,MAAMH,EAAY4B,KAAKC,UAAU5B,GAC7BC,EAAa0B,KAAKC,UAAU1B,GAC5BH,IAAcjB,KAAKiB,WAAaE,IAAenB,KAAKmB,aAGxDnB,KAAKkB,MAAQA,EACblB,KAAKiB,UAAYA,EACjBjB,KAAKoB,OAASA,EACdpB,KAAKmB,WAAaA,IAEtB4B,WAAY,WACR,MAAMnC,EAASZ,KACfG,EAAE6C,IAAIrC,GAAS,SAAUK,GACrBJ,EAAOsB,cAAclB,EAAKE,MAAOF,EAAKI,WACvCiB,OAAM,SAAUC,GACfW,QAAQC,MAAM,0CAA2CZ,OAGjEa,aAAc,WACV,MAAMvC,EAASZ,KACfA,KAAKuB,UAAY6B,OAAOC,aAAY,WAChCzC,EAAOmC,eACR,OAGXO,gBACIF,OAAOG,cAAcvD,KAAKuB,YAE9BiC,UACIxD,KAAKkC,cAAcW,KAAKY,MAAMhD,GAAgBoC,KAAKY,MAAM/C,IACzDV,KAAKmD","file":"UserAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class UserAdmin {\n    private widget;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".userAdmin\");\n        const userSaveUrl = this.element.getAttribute('data-url-user-save');\n        const initUsersJson = this.element.getAttribute('data-users');\n        const initGroupsJson = this.element.getAttribute('data-groups');\n        const pollUrl = this.element.getAttribute('data-url-poll');\n\n        this.widget = new Vue({\n            el: vueEl,\n            template: `<div class=\"adminUsers\">\n                <user-admin-widget :users=\"users\"\n                                   :groups=\"groups\"\n                                   @save-user-groups=\"saveUserGroups\"\n                ></user-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    usersJson: null,\n                    users: null,\n                    groupsJson: null,\n                    groups: null,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n            },\n            methods: {\n                _performOperation: function (additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    postData = Object.assign(postData, additionalProps);\n                    const widget = this;\n                    $.post(userSaveUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.setUserGroups(data.users, data.groups);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                saveUserGroups(user, groups) {\n                    this._performOperation({\n                        op: 'save-user-groups',\n                        userId: user.id,\n                        groups\n                    });\n                },\n                setUserGroups(users, groups) {\n                    const usersJson = JSON.stringify(users),\n                        groupsJson = JSON.stringify(groups);\n                    if (usersJson === this.usersJson && groupsJson === this.groupsJson) {\n                        return;\n                    }\n                    this.users = users;\n                    this.usersJson = usersJson;\n                    this.groups = groups;\n                    this.groupsJson = groupsJson;\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setUserGroups(data.users, data.groups);\n                    }).catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setUserGroups(JSON.parse(initUsersJson), JSON.parse(initGroupsJson));\n                this.startPolling()\n            }\n        });\n    }\n}\n"]}