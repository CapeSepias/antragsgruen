{"version":3,"sources":["frontend/MergeSingleAmendment.ts"],"names":["MergeSingleAmendment","_this","this","editors","collissionEditors","$form","$","$collissionHolder","$checkCollissions","$affectedParagraphs","$stepWizardHolder","find","$steps","1","2","3","click","ev","preventDefault","loadCollissions","gotoStep","each","i","el","initAffectedParagraph","submit","onSubmit","bind","prototype","no","n","removeClass","addClass","children","scrollintoview","top_offset","$paragraph","change","val","trigger","key","data","AntragsgruenEditor_1","AntragsgruenEditor","attr","url","sections","text","$el","modified","sectionId","paragraphNo","editor_1","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","post","newSections","_csrf","collissionsLoaded","html","$texteditors","length","id","$input","editor_2","editor_3","parents","first"],"mappings":"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","file":"MergeSingleAmendment.js","sourcesContent":["import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collissionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollissions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private $stepWizardHolder: JQuery;\n    private $steps: {[no: string]: JQuery};\n    private editors: AntragsgruenEditor[] = [];\n    private collissionEditors: {[id: string]: AntragsgruenEditor} = {};\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collissionHolder = $(\".amendmentCollissionsHolder\");\n        this.$checkCollissions = $(\".checkAmendmentCollissions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n\n        this.$stepWizardHolder = $(\"#MergeSingleWizard\").find(\".steps\");\n        this.$steps = {\n            \"1\": this.$form.find(\"> .step_1\"),\n            \"2\": this.$form.find(\"> .step_2\"),\n            \"3\": this.$form.find(\"> .step_3\")\n        };\n\n        this.$checkCollissions.click((ev) => {\n            ev.preventDefault();\n            this.loadCollissions();\n        });\n        this.$steps[\"1\"].find(\".goto_2\").click((ev) => {\n            ev.preventDefault();\n            this.gotoStep(\"2\");\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n        this.$form.submit(this.onSubmit.bind(this));\n\n        this.gotoStep(\"1\");\n    }\n\n    private gotoStep(no: string) {\n        for (let n in this.$steps) {\n            if (n == no) {\n                this.$steps[n].removeClass(\"hidden\");\n            } else {\n                this.$steps[n].addClass(\"hidden\");\n            }\n        }\n        this.$stepWizardHolder.children().removeClass(\"active\");\n        this.$stepWizardHolder.find(\".goto_step\" + no).addClass(\"active\");\n        this.$stepWizardHolder.scrollintoview({top_offset: -50});\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n\n        $paragraph.find(\".modifySelector input\").change(function () {\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                $paragraph.addClass(\"modified\").removeClass(\"unmodified\");\n            } else {\n                $paragraph.removeClass(\"modified\").addClass(\"unmodified\");\n            }\n        }).trigger(\"change\");\n\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        this.editors[key] = new AntragsgruenEditor($paragraph.find(\".affectedBlock > .texteditor\").attr(\"id\"));\n    }\n\n    private loadCollissions() {\n        this.gotoStep(\"3\");\n\n        let url = this.$checkCollissions.data(\"url\"),\n            sections = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                modified = $el.find(\".modifySelector input:checked\").val(),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (modified) {\n                let editor: editor = this.editors[sectionId + \"_\" + paragraphNo].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                text = $el.data(\"unchanged-amendment\");\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        $.post(url, {\n            'newSections': sections,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collissionsLoaded.bind(this));\n    }\n\n    private collissionsLoaded(html) {\n        this.collissionEditors = {};\n        this.$collissionHolder.html(html);\n        let $texteditors = this.$collissionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                let id = $(el).attr(\"id\");\n                this.collissionEditors[id] = new AntragsgruenEditor(id);\n            });\n        }\n    }\n\n    private onSubmit() {\n        this.$affectedParagraphs.each((i, el) => {\n            let $paragraph = $(el),\n                $input = $paragraph.find(\".modifiedText\");\n\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\"),\n                    editor: editor = this.editors[key].getEditor();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                }\n                $input.val(editor.getData());\n            } else {\n                $input.val($paragraph.data(\"unchanged-amendment\"));\n            }\n        });\n        for (let id in this.collissionEditors) {\n            let editor: editor = this.collissionEditors[id].getEditor();\n            if (typeof(editor.plugins.lite) != 'undefined') {\n                editor.plugins.lite.findPlugin(editor).acceptAll();\n            }\n            let html = editor.getData();\n\n            $(\"#\" + id).parents(\".amendmentOverrideBlock\").first().find(\"> textarea\").val(html);\n        }\n    }\n}\n\nnew MergeSingleAmendment();\n"]}