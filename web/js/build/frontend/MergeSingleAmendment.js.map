{"version":3,"sources":["frontend/MergeSingleAmendment.ts"],"names":["MergeSingleAmendment","_this","this","editors","collissionEditors","$form","$","$collissionHolder","$checkCollissions","$affectedParagraphs","click","ev","preventDefault","loadCollissions","each","i","el","initAffectedParagraph","submit","onSubmit","bind","prototype","$paragraph","find","change","val","addClass","removeClass","trigger","key","data","AntragsgruenEditor_1","AntragsgruenEditor","attr","url","sections","text","$el","modified","sectionId","paragraphNo","console","log","editor_1","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","post","newSections","_csrf","collissionsLoaded","html","$texteditors","length","id","scrollintoview","top_offset","hide","prop","show","$input","parents","first"],"mappings":"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","file":"MergeSingleAmendment.js","sourcesContent":["import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collissionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollissions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private editors: AntragsgruenEditor[] = [];\n    private collissionEditors: { [id: string]: AntragsgruenEditor} = {};\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collissionHolder = $(\".amendmentCollissionsHolder\");\n        this.$checkCollissions = $(\".checkAmendmentCollissions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n\n        this.$checkCollissions.click((ev) => {\n            ev.preventDefault();\n            this.loadCollissions();\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n        this.$form.submit(this.onSubmit.bind(this));\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n\n        $paragraph.find(\".modifySelector input\").change(function () {\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                $paragraph.addClass(\"modified\").removeClass(\"unmodified\");\n            } else {\n                $paragraph.removeClass(\"modified\").addClass(\"unmodified\");\n            }\n        }).trigger(\"change\");\n\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        this.editors[key] = new AntragsgruenEditor($paragraph.find(\".affectedBlock > .texteditor\").attr(\"id\"));\n    }\n\n    private loadCollissions() {\n        let url = this.$checkCollissions.data(\"url\"),\n            sections = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                modified = $el.find(\".modifySelector input:checked\").val(),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (modified) {\n                console.log(sectionId + \"_\" + paragraphNo);\n                let editor: editor = this.editors[sectionId + \"_\" + paragraphNo].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                text = $el.data(\"unchanged-amendment\");\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        $.post(url, {\n            'newSections': sections,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collissionsLoaded.bind(this));\n    }\n\n    private collissionsLoaded(html) {\n        console.log(html);\n\n        this.collissionEditors = {};\n        this.$collissionHolder.html(html);\n        let $texteditors = this.$collissionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                let id = $(el).attr(\"id\");\n                this.collissionEditors[id] = new AntragsgruenEditor(id);\n            });\n            this.$collissionHolder.scrollintoview({top_offset: -50});\n        }\n\n        this.$checkCollissions.hide();\n        $(\".saveholder .save\").prop(\"disabled\", false).show();\n    }\n\n    private onSubmit() {\n        this.$affectedParagraphs.each((i, el) => {\n            let $paragraph = $(el),\n                $input = $paragraph.find(\".modifiedText\");\n\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n                $input.val(this.editors[key].getEditor().getData());\n            } else {\n                $input.val($paragraph.data(\"unchanged-amendment\"));\n            }\n        });\n        for (let id in this.collissionEditors) {\n            let html = this.collissionEditors[id].getEditor().getData();\n            $(\"#\" + id).parents(\".amendmentOverrideBlock\").first().find(\"> textarea\").val(html);\n        }\n    }\n}\n\nnew MergeSingleAmendment();\n"]}