{"version":3,"sources":["frontend/MergeSingleAmendment.ts"],"names":["MergeSingleAmendment","_this","this","editors","$form","$","$collissionHolder","$checkCollissions","$affectedParagraphs","click","ev","preventDefault","loadCollissions","each","i","el","initAffectedParagraph","prototype","$paragraph","find","change","val","addClass","removeClass","key","data","AntragsgruenEditor_1","AntragsgruenEditor","attr","url","sections","text","$el","modified","sectionId","paragraphNo","console","log","editor_1","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","post","newSections","_csrf","collissionsLoaded","bind","html","$texteditors","length","scrollintoview","top_offset","hide","prop","show"],"mappings":"wFAGA,IAAAA,GAAA,WAOI,QAAAA,KAAA,GAAAC,GAAAC,IAFQA,MAAAC,WAGJD,KAAKE,MAAQC,EAAE,uBACfH,KAAKI,kBAAoBD,EAAE,+BAC3BH,KAAKK,kBAAoBF,EAAE,8BAC3BH,KAAKM,oBAAsBH,EAAE,oCAE7BH,KAAKK,kBAAkBE,MAAM,SAACC,GAC1BA,EAAGC,iBACHV,EAAKW,oBAETV,KAAKM,oBAAoBK,KAAK,SAACC,EAAGC,GAC9Bd,EAAKe,sBAAsBD,KAiFvC,MA5EYf,GAAAiB,UAAAD,sBAAR,SAA8BD,GAC1B,GAAIG,GAAab,EAAEU,EACnBG,GAAWC,KAAK,yBAAyBC,OAAO,WACkB,KAA1DF,EAAWC,KAAK,iCAAiCE,MACjDH,EAAWI,SAAS,YAAYC,YAAY,cAE5CL,EAAWK,YAAY,YAAYD,SAAS,eAGpD,IAAIE,GAAMN,EAAWO,KAAK,cAAgB,IAAMP,EAAWO,KAAK,eAChEvB,MAAKC,QAAQqB,GAAO,GAAIE,GAAAC,mBAAmBT,EAAWC,KAAK,gCAAgCS,KAAK,QAG5F5B,EAAAiB,UAAAL,gBAAR,WAAA,GAAAX,GAAAC,KACQ2B,EAAM3B,KAAKK,kBAAkBkB,KAAK,OAClCK,IAEJ5B,MAAKM,oBAAoBK,KAAK,SAACC,EAAGC,GAC9B,GAIIgB,GAJAC,EAAM3B,EAAEU,GACRkB,EAAWD,EAAIb,KAAK,iCAAiCE,MACrDa,EAAYF,EAAIP,KAAK,cACrBU,EAAcH,EAAIP,KAAK,eAG3B,IAAIQ,EAAU,CACVG,QAAQC,IAAIH,EAAY,IAAMC,EAC9B,IAAIG,GAAiBrC,EAAKE,QAAQ+B,EAAY,IAAMC,GAAaI,YAC7DC,EAAWF,EAAOG,SACa,oBAAxBH,GAAOI,QAAY,MAC1BJ,EAAOI,QAAQC,KAAKC,WAAWN,GAAQO,YACvCd,EAAOO,EAAOG,UACdH,EAAOQ,QAAQN,IAEfT,EAAOO,EAAOG,cAGlBV,GAAOC,EAAIP,KAAK,sBAGqBsB,UAArCjB,EAASE,EAAIP,KAAK,iBAClBK,EAASE,EAAIP,KAAK,mBAEtBK,EAASE,EAAIP,KAAK,eAAeO,EAAIP,KAAK,iBAAmBM,IAYjE1B,EAAE2C,KAAKnB,GACHoB,YAAenB,EACfoB,MAAShD,KAAKE,MAAMe,KAAK,uBAAuBE,OACjDnB,KAAKiD,kBAAkBC,KAAKlD,QAG3BF,EAAAiB,UAAAkC,kBAAR,SAA0BE,GACtBjB,QAAQC,IAAIgB,GAEZnD,KAAKI,kBAAkB+C,KAAKA,EAC5B,IAAIC,GAAepD,KAAKI,kBAAkBa,KAAK,wCAE3CmC,GAAaC,OAAS,IACtBD,EAAazC,KAAK,SAACC,EAAGC,GAClB,GAAIW,GAAAC,mBAAmBtB,EAAEU,GAAIa,KAAK,SAEtC1B,KAAKI,kBAAkBkD,gBAAgBC,YAAY,MAGvDvD,KAAKK,kBAAkBmD,OACvBrD,EAAE,qBAAqBsD,KAAK,YAAY,GAAOC,QAEvD5D,IAEA,IAAIA","file":"MergeSingleAmendment.js","sourcesContent":["import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collissionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollissions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private editors: AntragsgruenEditor[] = [];\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collissionHolder = $(\".amendmentCollissionsHolder\");\n        this.$checkCollissions = $(\".checkAmendmentCollissions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n\n        this.$checkCollissions.click((ev) => {\n            ev.preventDefault();\n            this.loadCollissions();\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n        $paragraph.find(\".modifySelector input\").change(function () {\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                $paragraph.addClass(\"modified\").removeClass(\"unmodified\");\n            } else {\n                $paragraph.removeClass(\"modified\").addClass(\"unmodified\");\n            }\n        });\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        this.editors[key] = new AntragsgruenEditor($paragraph.find(\".affectedBlock > .texteditor\").attr(\"id\"));\n    }\n\n    private loadCollissions() {\n        let url = this.$checkCollissions.data(\"url\"),\n            sections = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                modified = $el.find(\".modifySelector input:checked\").val(),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (modified) {\n                console.log(sectionId + \"_\" + paragraphNo);\n                let editor: editor = this.editors[sectionId + \"_\" + paragraphNo].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                text = $el.data(\"unchanged-amendment\");\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        /*\n         $(\"#motionTextEditHolder\").children().each(function () {\n         let $this = $(this);\n         if ($this.hasClass(\"wysiwyg-textarea\")) {\n         let sectionId = $this.attr(\"id\").replace(\"section_holder_\", \"\");\n         sections[sectionId] = CKEDITOR.instances[$this.find(\".texteditor\").attr(\"id\")].getData();\n         }\n         });\n         */\n        $.post(url, {\n            'newSections': sections,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collissionsLoaded.bind(this));\n    }\n\n    private collissionsLoaded(html) {\n        console.log(html);\n\n        this.$collissionHolder.html(html);\n        let $texteditors = this.$collissionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                new AntragsgruenEditor($(el).attr(\"id\"));\n            });\n            this.$collissionHolder.scrollintoview({top_offset: -50});\n        }\n\n        this.$checkCollissions.hide();\n        $(\".saveholder .save\").prop(\"disabled\", false).show();\n    }\n}\n\nnew MergeSingleAmendment();\n"]}