{"version":3,"sources":["frontend/MergeSingleAmendment.ts"],"names":["MergeSingleAmendment","_this","this","editors","collisionEditors","$form","$","$collisionHolder","$checkCollisions","$affectedParagraphs","$otherStatsFields","$stepWizardHolder","find","$steps","1","2","3","click","ev","preventDefault","loadCollisions","gotoStep","each","i","el","initAffectedParagraph","submit","onSubmit","bind","prototype","no","n","removeClass","addClass","children","scrollintoview","top_offset","$paragraph","change","val","trigger","prop","key","data","length","AntragsgruenEditor_1","AntragsgruenEditor","attr","url","sections","otherAmendmentsStatus","text","$el","version","changed","sectionId","paragraphNo","srcId","editor_1","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","$input","parents","post","newSections","_csrf","collisionsLoaded","html","$texteditors","id","editor_2","editor_3","first"],"mappings":"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","file":"MergeSingleAmendment.js","sourcesContent":["import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collisionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollisions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private $stepWizardHolder: JQuery;\n    private $steps: {[no: string]: JQuery};\n    private editors: AntragsgruenEditor[] = [];\n    private collisionEditors: {[id: string]: AntragsgruenEditor} = {};\n    private $otherStatsFields: JQuery;\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collisionHolder = $(\".amendmentCollisionsHolder\");\n        this.$checkCollisions = $(\".checkAmendmentCollisions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n        this.$otherStatsFields = $(\".otherAmendmentStatus input\");\n\n        this.$stepWizardHolder = $(\"#MergeSingleWizard\").find(\".steps\");\n        this.$steps = {\n            \"1\": this.$form.find(\"> .step_1\"),\n            \"2\": this.$form.find(\"> .step_2\"),\n            \"3\": this.$form.find(\"> .step_3\")\n        };\n\n        this.$checkCollisions.click((ev) => {\n            ev.preventDefault();\n            this.loadCollisions();\n        });\n        this.$steps[\"1\"].find(\".goto_2\").click((ev) => {\n            ev.preventDefault();\n            this.gotoStep(\"2\");\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n        this.$form.submit(this.onSubmit.bind(this));\n\n        this.gotoStep(\"1\");\n    }\n\n    private gotoStep(no: string) {\n        for (let n in this.$steps) {\n            if (n == no) {\n                this.$steps[n].removeClass(\"hidden\");\n            } else {\n                this.$steps[n].addClass(\"hidden\");\n            }\n        }\n        this.$stepWizardHolder.children().removeClass(\"active\");\n        this.$stepWizardHolder.find(\".goto_step\" + no).addClass(\"active\");\n        this.$stepWizardHolder.scrollintoview({top_offset: -50});\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n\n        $paragraph.find(\".versionSelector input\").change(() => {\n            if ($paragraph.find(\".versionSelector input:checked\").val() == \"modified\") {\n                $paragraph.removeClass(\"originalVersion\").addClass(\"modifiedVersion\");\n            } else {\n                $paragraph.addClass(\"originalVersion\").removeClass(\"modifiedVersion\");\n            }\n        }).trigger(\"change\");\n        $paragraph.find(\".modifySelector input\").change(() => {\n            if ($paragraph.find(\".modifySelector input\").prop(\"checked\")) {\n                $paragraph.addClass(\"changed\").removeClass(\"unchanged\");\n            } else {\n                $paragraph.removeClass(\"changed\").addClass(\"unchanged\");\n            }\n        }).trigger(\"change\");\n\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        if ($paragraph.find(\".originalVersion.modifyText\").length > 0) {\n            this.editors[key + '_original'] = new AntragsgruenEditor($paragraph.find(\".originalVersion.modifyText > .texteditor\").attr(\"id\"));\n        }\n        if ($paragraph.find(\".modifiedVersion.modifyText\").length > 0) {\n            this.editors[key + '_modified'] = new AntragsgruenEditor($paragraph.find(\".modifiedVersion.modifyText > .texteditor\").attr(\"id\"));\n        }\n    }\n\n    private loadCollisions() {\n        this.gotoStep(\"3\");\n\n        let url = this.$checkCollisions.data(\"url\"),\n            sections = {},\n            otherAmendmentsStatus = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                version = $el.find(\".versionSelector input:checked\").val(),\n                changed = $el.find(\".modifySelector input\").prop(\"checked\"),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (changed) {\n                const srcId = sectionId + \"_\" + paragraphNo + (version === 'modified' ? '_modified' : '_original');\n                let editor: editor = this.editors[srcId].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                if (version === 'modified') {\n                    text = $el.data(\"modified-amendment\");\n                } else {\n                    text = $el.data(\"unchanged-amendment\");\n                }\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        this.$otherStatsFields.each((i, el) => {\n            let $input:JQuery = $(el);\n            otherAmendmentsStatus[$input.parents(\".selectlist\").data(\"amendment-id\")] = $input.val();\n        });\n\n        $.post(url, {\n            'newSections': sections,\n            'otherAmendmentsStatus': otherAmendmentsStatus,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collisionsLoaded.bind(this));\n    }\n\n    private collisionsLoaded(html) {\n        this.collisionEditors = {};\n        this.$collisionHolder.html(html);\n        let $texteditors = this.$collisionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                let id = $(el).attr(\"id\");\n                this.collisionEditors[id] = new AntragsgruenEditor(id);\n            });\n        }\n    }\n\n    private onSubmit() {\n        this.$affectedParagraphs.each((i, el) => {\n            let $paragraph = $(el),\n                version = $paragraph.find(\".versionSelector input:checked\").val(),\n                changed = $paragraph.find(\".modifySelector input\").prop(\"checked\"),\n                $input = $paragraph.find(\".modifiedText\");\n\n            if (changed) {\n                let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\") + (version === 'modified' ? '_modified' : '_original'),\n                    editor: editor = this.editors[key].getEditor();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                }\n                $input.val(editor.getData());\n            } else {\n                if (version === 'modified') {\n                    $input.val($paragraph.data(\"modified-amendment\"));\n                } else {\n                    $input.val($paragraph.data(\"unchanged-amendment\"));\n                }\n            }\n        });\n        for (let id in this.collisionEditors) {\n            let editor: editor = this.collisionEditors[id].getEditor();\n            if (typeof(editor.plugins.lite) != 'undefined') {\n                editor.plugins.lite.findPlugin(editor).acceptAll();\n            }\n            let html = editor.getData();\n\n            $(\"#\" + id).parents(\".amendmentOverrideBlock\").first().find(\"> textarea\").val(html);\n        }\n    }\n}\n\nnew MergeSingleAmendment();\n"]}