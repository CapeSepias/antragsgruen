{"version":3,"sources":["frontend/VotingBlock.js","frontend/VotingBlock.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingBlock","constructor","$element","element","vueEl","querySelector","votingInitJson","getAttribute","pollUrl","voteUrl","showAdminLink","console","log","this","widget","Vue","createApp","template","data","votings","JSON","parse","pollingId","onReloadedCbs","methods","vote","votingBlockId","itemGroupSameVote","itemType","itemId","votePublic","postData","_csrf","document","votes","public","url","replace","$","post","undefined","success","forEach","cb","alert","message","catch","err","responseText","addReloadedCb","push","reloadData","get","error","startPolling","window","setInterval","beforeUnmount","clearInterval","created","config","compilerOptions","whitespace","widgetComponent","mount","noneIndicator","querySelectorAll","length","node","classList","remove","add"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,iBAAc,ECD1BJ,EAAAI,YAAA,MAIIC,YAAYC,GACR,MAAMC,EAAUD,EAAS,GACrBE,EAAQD,EAAQE,cAAc,kBAC9BC,EAAiBH,EAAQI,aAAa,eACtCC,EAAUL,EAAQI,aAAa,iBAC/BE,EAAUN,EAAQI,aAAa,iBAC/BG,EAAgBP,EAAQI,aAAa,wBACzCI,QAAQC,IAAIF,GAEZG,KAAKC,OAASC,IAAIC,UAAU,CACxBC,SAAU,6NAIVC,KAAI,KACO,CACHC,QAASC,KAAKC,MAAMf,GACpBgB,UAAW,KACXZ,gBACAa,cAAe,KAGvBC,QAAS,CACLC,KAAM,SAAUC,EAAeC,EAAmBC,EAAUC,EAAQJ,EAAMK,GACtE,MAAMC,EAAW,CACbC,MAAOC,SAAS5B,cAAc,8BAA8BE,aAAa,WACzE2B,MAAO,CAAC,CACJP,oBACAC,WACAC,SACAJ,OACAU,OAAUL,KAGZhB,EAASD,KACTuB,EAAM3B,EAAQ4B,QAAQ,gBAAiBX,GAC7CY,EAAEC,KAAKH,EAAKL,GAAU,SAAUb,QACPsB,IAAjBtB,EAAKuB,SAA0BvB,EAAKuB,SAIxC3B,EAAOK,QAAUD,EACjBJ,EAAOS,cAAcmB,SAAQC,IACzBA,EAAG7B,EAAOK,QAAQ,KALlByB,MAAM1B,EAAK2B,QAOnB,IAAGC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,aACd,GACJ,EACAC,cAAe,SAAUN,GACrB9B,KAAKU,cAAc2B,KAAKP,EAC5B,EACAQ,WAAY,WACR,GAAgB,OAAZ3C,EACA,OAEJ,MAAMM,EAASD,KACfyB,EAAEc,IAAI5C,GAAS,SAAUU,GACrBJ,EAAOK,QAAUD,EACjBJ,EAAOS,cAAcmB,SAAQC,IACzBA,EAAG7B,EAAOK,QAAQ,GAE1B,IAAG2B,OAAM,SAAUC,GACfpC,QAAQ0C,MAAM,0CAA2CN,EAC7D,GACJ,EACAO,aAAc,WACV,MAAMxC,EAASD,KACfA,KAAKS,UAAYiC,OAAOC,aAAY,WAChC1C,EAAOqC,YACX,GAAG,IACP,GAEJM,gBACIF,OAAOG,cAAc7C,KAAKS,UAC9B,EACAqC,UACI9C,KAAKyC,cACT,IAGJzC,KAAKC,OAAO8C,OAAOC,gBAAgBC,WAAa,WAChDP,OAA4B,oBAAE1C,KAAKC,OAAQ,UAE3CD,KAAKkD,gBAAkBlD,KAAKC,OAAOkD,MAAM5D,GAEzC,MAAM6D,EAAgBhC,SAASiC,iBAAiB,yBAChDrD,KAAKkD,gBAAgBd,eAAc/B,IACX,IAAhBA,EAAKiD,OACLF,EAAcvB,SAAQ0B,GAAQA,EAAKC,UAAUC,OAAO,YAEpDL,EAAcvB,SAAQ0B,GAAQA,EAAKC,UAAUE,IAAI,WDRjD,GCWZ,EDNJ","file":"VotingBlock.js","sourcesContent":[null,"declare var Vue: any;\n\nexport class VotingBlock {\n    private widget: any;\n    private widgetComponent: any;\n\n    constructor($element: JQuery) {\n        const element = $element[0],\n            vueEl = element.querySelector(\".currentVoting\"),\n            votingInitJson = element.getAttribute('data-voting'),\n            pollUrl = element.getAttribute('data-url-poll'),\n            voteUrl = element.getAttribute('data-url-vote'),\n            showAdminLink = element.getAttribute('data-show-admin-link');\n        console.log(showAdminLink);\n\n        this.widget = Vue.createApp({\n            template: `\n                <div class=\"currentVotings\">\n                <voting-block-widget v-for=\"voting in votings\" :voting=\"voting\" @vote=\"vote\" :showAdminLink=\"showAdminLink\"></voting-block-widget>\n                </div>`,\n            data() {\n                return {\n                    votings: JSON.parse(votingInitJson),\n                    pollingId: null,\n                    showAdminLink,\n                    onReloadedCbs: []\n                };\n            },\n            methods: {\n                vote: function (votingBlockId, itemGroupSameVote, itemType, itemId, vote, votePublic) {\n                    const postData = {\n                        _csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                        votes: [{\n                            itemGroupSameVote,\n                            itemType,\n                            itemId,\n                            vote,\n                            \"public\": votePublic\n                        }]\n                    };\n                    const widget = this;\n                    const url = voteUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                        widget.onReloadedCbs.forEach(cb => {\n                            cb(widget.votings);\n                        });\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                addReloadedCb: function (cb) {\n                    this.onReloadedCbs.push(cb);\n                },\n                reloadData: function () {\n                    if (pollUrl === null) {\n                        return;\n                    }\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.votings = data;\n                        widget.onReloadedCbs.forEach(cb => {\n                            cb(widget.votings);\n                        });\n                    }).catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeUnmount() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.startPolling()\n            }\n        });\n\n        this.widget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](this.widget, 'voting');\n\n        this.widgetComponent = this.widget.mount(vueEl);\n\n        const noneIndicator = document.querySelectorAll('.votingsNoneIndicator')\n        this.widgetComponent.addReloadedCb(data => {\n            if (data.length === 0) {\n                noneIndicator.forEach(node => node.classList.remove('hidden'));\n            } else {\n                noneIndicator.forEach(node => node.classList.add('hidden'));\n            }\n        });\n    }\n}\n"]}