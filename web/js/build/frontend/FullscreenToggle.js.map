{"version":3,"sources":["frontend/FullscreenToggle.js","frontend/FullscreenToggle.ts"],"names":["define","require","exports","Object","defineProperty","value","FullscreenToggle","[object Object]","$element","this","vueElement","vueWidget","element","getAttribute","holderElement","createFullscreenVueHolder","document","querySelector","addEventListener","toggleFullScreeen","bind","forEach","eventType","onFullscreenChange","append","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","initVueElement","doc","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","isFullscreen","destroyVueElement","remove","createElement","classList","add","vueHolder","template","Vue","el","firstChild","data","methods","console","log","$destroy"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,sBAAmB,ECC/BJ,EAAAI,iBAAA,MAKIC,YAAoBC,GAAAC,KAAAD,SAAAA,EAHHC,KAAAC,WAAqB,KAC9BD,KAAAE,UAAY,KAGhB,MAAMC,EAAUJ,EAAS,GACrBI,EAAQC,aAAa,qBACrBJ,KAAKC,WAAaE,EAAQC,aAAa,oBACvCJ,KAAKK,cAAgBL,KAAKM,6BAE1BN,KAAKK,cAAgBE,SAASC,cAAc,SAEhDL,EAAQM,iBAAiB,QAAST,KAAKU,kBAAkBC,KAAKX,OAE9D,CAAC,mBAAoB,yBAA0B,sBAAuB,sBAAsBY,SACxFC,GAAaN,SAASE,iBAAiBI,EAAWb,KAAKc,mBAAmBH,KAAKX,OAAO,KAItFF,oBACAE,KAAKC,YACLM,SAASC,cAAc,QAAQO,OAAOf,KAAKK,eAG/C,IAAIA,EAAgBL,KAAKK,cACrBA,EAAcW,kBACdX,EAAcW,oBACPX,EAAcY,wBACrBZ,EAAcY,0BACPZ,EAAca,qBACrBb,EAAca,uBACPb,EAAcc,qBACrBd,EAAcc,sBAGdnB,KAAKC,YACLD,KAAKoB,iBAILtB,iBACJ,IAAIuB,EAAWd,SACXc,EAAIC,eACJD,EAAIC,iBACGD,EAAIE,qBACXF,EAAIE,uBACGF,EAAIG,oBACXH,EAAIG,sBACGH,EAAII,kBACXJ,EAAII,mBAIJ3B,eACJ,IAAIuB,EAAWd,SACf,SAAUc,EAAIK,mBACVL,EAAIM,yBACJN,EAAIO,sBACJP,EAAIQ,qBAGJ/B,oBACAE,KAAK8B,eACL9B,KAAKsB,iBAELtB,KAAKgB,oBAILlB,sBACCE,KAAK8B,gBAAkB9B,KAAKC,aAC7BD,KAAK+B,oBACL/B,KAAKK,cAAc2B,UAInBlC,4BAEJ,MAAMK,EAAUI,SAAS0B,cAAc,WACvC9B,EAAQ+B,UAAUC,IAAI,aACtB,MAAMC,EAAY7B,SAAS0B,cAAc,OAGzC,OAFA9B,EAAQY,OAAOqB,GAERjC,EAGHL,iBAEJ,IAAIuC,EAAW,IAAMrC,KAAKC,WAAa,MAAQD,KAAKC,WAAa,IACjED,KAAKE,UAAY,IAAIoC,IAAI,CACrBC,GAAIvC,KAAKK,cAAcmC,WACvBH,SAAAA,EACAI,KAAI,KACO,IAEXC,QAAS,GACT5C,gBACI6C,QAAQC,IAAI,YAEhB9C,cAIAA,oBAEJE,KAAKE,UAAU2C","file":"FullscreenToggle.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class FullscreenToggle {\n    private readonly holderElement: HTMLElement;\n    private readonly vueElement: string = null;\n    private vueWidget = null;\n\n    constructor(private $element: JQuery) {\n        const element = $element[0] as HTMLElement;\n        if (element.getAttribute('data-vue-element')) {\n            this.vueElement = element.getAttribute('data-vue-element');\n            this.holderElement = this.createFullscreenVueHolder();\n        } else {\n            this.holderElement = document.querySelector(\".well\");\n        }\n        element.addEventListener('click', this.toggleFullScreeen.bind(this));\n\n        [\"fullscreenchange\", \"webkitfullscreenchange\", \"mozfullscreenchange\", \"msfullscreenchange\"].forEach(\n            eventType => document.addEventListener(eventType, this.onFullscreenChange.bind(this), false)\n        );\n    }\n\n    private requestFullscreen() {\n        if (this.vueElement) {\n            document.querySelector(\"body\").append(this.holderElement);\n        }\n\n        let holderElement = this.holderElement as any;\n        if (holderElement.requestFullscreen) {\n            holderElement.requestFullscreen();\n        } else if (holderElement.webkitRequestFullscreen) {\n            holderElement.webkitRequestFullscreen();\n        } else if (holderElement.mozRequestFullScreen) {\n            holderElement.mozRequestFullScreen();\n        } else if (holderElement.msRequestFullscreen) {\n            holderElement.msRequestFullscreen();\n        }\n\n        if (this.vueElement) {\n            this.initVueElement();\n        }\n    }\n\n    private exitFullscreen() {\n        let doc: any = document;\n        if (doc.exitFullscreen) {\n            doc.exitFullscreen();\n        } else if (doc.webkitExitFullscreen) {\n            doc.webkitExitFullscreen();\n        } else if (doc.mozCancelFullScreen) {\n            doc.mozCancelFullScreen();\n        } else if (doc.msExitFullscreen) {\n            doc.msExitFullscreen();\n        }\n    }\n\n    private isFullscreen(): boolean {\n        let doc: any = document;\n        return !!(doc.fullscreenElement ||\n            doc.webkitFullscreenElement ||\n            doc.mozFullScreenElement ||\n            doc.msFullscreenElement);\n    }\n\n    private toggleFullScreeen() {\n        if (this.isFullscreen()) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    private onFullscreenChange() {\n        if (!this.isFullscreen() && this.vueElement) {\n            this.destroyVueElement();\n            this.holderElement.remove();\n        }\n    }\n\n    private createFullscreenVueHolder(): HTMLElement\n    {\n        const element = document.createElement('article');\n        element.classList.add('projector');\n        const vueHolder = document.createElement('div');\n        element.append(vueHolder);\n\n        return element;\n    }\n\n    private initVueElement(): void\n    {\n        let template = '<' + this.vueElement + '></' + this.vueElement + '>';\n        this.vueWidget = new Vue({\n            el: this.holderElement.firstChild as HTMLElement,\n            template,\n            data() {\n                return {};\n            },\n            methods: {},\n            beforeDestroy() {\n                console.log(\"destroy\");\n            },\n            created() {}\n        });\n    }\n\n    private destroyVueElement(): void\n    {\n        this.vueWidget.$destroy();\n    }\n}\n"]}