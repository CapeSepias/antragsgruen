{"version":3,"sources":["frontend/MotionMergeAmendments.ts"],"names":["AMENDMENT_VERSION","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AmendmentStatuses","init","statuses","versions","votingData","Object","keys","forEach","amendmentId","statusListeners","registerNewAmendment","status","version","console","log","getAmendmentStatus","getAmendmentVersion","getAmendmentVotingData","registerParagraph","paragraph","push","setStatus","onAmendmentStatusChanged","setVersion","onAmendmentVersionChanged","setVotesData","voteData","onAmendmentVotingChanged","getAmendmentIds","map","key","parseInt","getAllStatuses","getAllVersions","getAllVotingData","MotionMergeChangeActions","removeEmptyParagraphs","$","each","i","el","childNodes","length","remove","accept","node","onFinished","$node","hasClass","insertAccept","deleteAccept","reject","insertReject","deleteReject","$removeEl","name","nodeName","toLowerCase","parent","css","height","animate","$this","removeClass","removeAttr","children","replaceWith","html","exports","MotionMergeChangeTooltip","$element","mouseX","mouseY","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","data","window","setTimeout","width","elTop","offset","top","elHeight","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","prototype","$myEl","cid","undefined","parents","first","addClass","$el","attr","__t","text","$list","alert","is","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","_this","onChanged","focusAtSameCid","stale","$stale","warn","e","MotionMergeAmendmentsTextarea","$holder","$changedIndicator","$mergeActionHolder","unchangedText","hasChanged","changedListeners","$textarea","edit","AntragsgruenEditor_1","AntragsgruenEditor","texteditor","getEditor","setText","getData","prepareText","$text","appendHint","removeData","markupMovedParagraph","newText","setData","normalizeHtml","fire","addChangedListener","cb","msg","paragraphNew","replace","initializeTooltips","$target","currentTarget","MotionMergeAmendments","activePopup","pageX","pageY","acceptAll","rejectAll","getUnchangedContent","entities","&nbsp;","&ndash;","&auml;","&ouml;","&uuml;","&Auml;","&Ouml;","&Uuml;","&szlig;","&bdquo;","&ldquo;","&bull;","&sect;","&eacute;","&rsquo;","&euro;","ent","RegExp","hasChanges","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","amendmentParagraphData","amend","id","JSON","parse","stringify","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","template","created","$on","newStatus","amendment","getAmendmentData","active","indexOf","reloadText","methods","getAllAmendmentData","setAmendmentActive","update","eventData","op","$emit","$collision","$collisionHolder","preventDefault","amendments","filter","amendmentData","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","document","getElementById","getAttribute","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initCheckBackendStatus","initRemovingSectionTexts","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","onlyInput","par","sections","removedSections","val","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem","amendmentIds","join","onReceivedBackendStatus","newAmendments","deletedAmendments","newAmendmentStaticData"],"mappings":"0IAOA,IAMKA,EAAAA,EANCC,EAAkB,EAClBC,EAA2B,EAC3BC,EAAmB,GACnBC,EAAiB,EACjBC,EAAmB,GAEpBL,EAAAA,IAAAA,EAAiB,KAClB,SAAA,OACAA,EAAA,mBAAA,OAWJ,IAAAM,EAAA,WAAA,SAAAA,KAgFA,OA1EkBA,EAAAC,KAAd,SACIC,EACAC,EACAC,GAEAJ,EAAkBE,SAAWA,EAC7BF,EAAkBG,SAAWA,EAC7BH,EAAkBI,WAAaA,EAE/BC,OAAOC,KAAKJ,GAAUK,QAAQ,SAAAC,GAC1BR,EAAkBS,gBAAgBD,GAAe,MAI3CR,EAAAU,qBAAd,SAAmCF,EAAqBG,EAAgBC,EAA4BR,GAChGJ,EAAkBE,SAASM,GAAeG,EAC1CX,EAAkBG,SAASK,GAAeI,EAC1CZ,EAAkBI,WAAWI,GAAeJ,EAE5CS,QAAQC,IAAI,kCAAmCd,EAAkBE,SAAUF,EAAkBG,SAAUH,EAAkBI,aAG/GJ,EAAAe,mBAAd,SAAiCP,GAC7B,OAAOR,EAAkBE,SAASM,IAGxBR,EAAAgB,oBAAd,SAAkCR,GAC9B,OAAOR,EAAkBG,SAASK,IAGxBR,EAAAiB,uBAAd,SAAqCT,GACjC,OAAOR,EAAkBI,WAAWI,IAG1BR,EAAAkB,kBAAd,SAAgCV,EAAqBW,GACjDnB,EAAkBS,gBAAgBD,GAAaY,KAAKD,IAG1CnB,EAAAqB,UAAd,SAAwBb,EAAqBG,GACzCX,EAAkBE,SAASM,GAAeG,EAC1CX,EAAkBS,gBAAgBD,GAAaD,QAAQ,SAAAY,GACnDA,EAAUG,yBAAyBd,EAAaG,MAI1CX,EAAAuB,WAAd,SAAyBf,EAAqBI,GAC1CZ,EAAkBG,SAASK,GAAeI,EAC1CZ,EAAkBS,gBAAgBD,GAAaD,QAAQ,SAAAY,GACnDA,EAAUK,0BAA0BhB,EAAaI,MAI3CZ,EAAAyB,aAAd,SAA2BjB,EAAqBkB,GAC5C1B,EAAkBI,WAAWI,GAAekB,EAC5C1B,EAAkBS,gBAAgBD,GAAaD,QAAQ,SAAAY,GACnDA,EAAUQ,yBAAyBnB,EAAakB,MAI1C1B,EAAA4B,gBAAd,WACI,OAAOvB,OAAOC,KAAKN,EAAkBE,UAAU2B,IAAI,SAAAC,GAAO,OAAAC,SAASD,EAAK,OAG9D9B,EAAAgC,eAAd,WACI,OAAOhC,EAAkBE,UAGfF,EAAAiC,eAAd,WACI,OAAOjC,EAAkBG,UAGfH,EAAAkC,iBAAd,WACI,OAAOlC,EAAkBI,YA1EdJ,EAAAS,gBAA+E,GA4ElGT,EAhFA,GAkFAmC,EAAA,WAAA,SAAAA,KAyGA,OAxGkBA,EAAAC,sBAAd,WACIC,EAAE,eAAeC,KAAK,SAACC,EAAGC,GACM,GAAxBA,EAAGC,WAAWC,QACdL,EAAEG,GAAIG,YAKJR,EAAAS,OAAd,SAAqBC,EAAeC,QAAA,IAAAA,IAAAA,EAAA,MAChC,IAAIC,EAAQV,EAAEQ,GACVE,EAAMC,SAAS,YACfb,EAAyBc,aAAaJ,EAAMC,GAE5CC,EAAMC,SAAS,YACfb,EAAyBe,aAAaL,EAAMC,IAItCX,EAAAgB,OAAd,SAAqBN,EAAeC,QAAA,IAAAA,IAAAA,EAAA,MAChC,IAAIC,EAAQV,EAAEQ,GACVE,EAAMC,SAAS,YACfb,EAAyBiB,aAAaL,EAAOD,GAE7CC,EAAMC,SAAS,YACfb,EAAyBkB,aAAaN,EAAOD,IAIvCX,EAAAiB,aAAd,SAA2BL,EAAeD,QAAA,IAAAA,IAAAA,EAAA,MACtC,IAAIQ,EACAC,EAAOR,EAAM,GAAGS,SAASC,cAEzBH,EADQ,MAARC,EACYR,EAAMW,SAENX,EAEJ,MAARQ,GAAwB,MAARA,GAAwB,MAARA,GAAwB,cAARA,GAAgC,OAARA,GAAyB,KAARA,GACzFD,EAAUK,IAAI,WAAY,UAAUC,OAAON,EAAUM,UACrDN,EAAUO,QAAQ,CAACD,OAAU,KAAM,IAAK,WACpCN,EAAUX,SACVN,EAAE,6BAA6BM,SAC/BR,EAAyBC,wBACrBU,GAAYA,QAGpBQ,EAAUX,SACNG,GAAYA,MAIVX,EAAAc,aAAd,SAA2BJ,EAAeC,QAAA,IAAAA,IAAAA,EAAA,MACtC,IAAIgB,EAAQzB,EAAEQ,GACdiB,EAAMC,YAAY,oCAClBD,EAAME,WAAW,4FACkB,MAA/BnB,EAAKW,SAASC,eAAwD,MAA/BZ,EAAKW,SAASC,eACrDK,EAAMG,WAAWF,YAAY,WAAWA,YAAY,WAAWA,YAAY,cAE5C,MAA/BlB,EAAKW,SAASC,eACdK,EAAMJ,SAASK,YAAY,WAAWA,YAAY,WAAWA,YAAY,cAE1C,OAA/BlB,EAAKW,SAASC,eACdK,EAAMI,YAAYJ,EAAMK,QAExBrB,GAAYA,KAGNX,EAAAkB,aAAd,SAA2BN,EAAeD,QAAA,IAAAA,IAAAA,EAAA,MACtCC,EAAMgB,YAAY,8BAClBhB,EAAMiB,WAAW,4FACjB,IAAIR,EAAWT,EAAM,GAAGS,SAASC,cACjB,MAAZD,GAAgC,MAAZA,GACpBT,EAAMkB,WAAWF,YAAY,WAAWA,YAAY,WAAWA,YAAY,cAE/D,MAAZP,GACAT,EAAMW,SAASK,YAAY,WAAWA,YAAY,WAAWA,YAAY,cAE7D,OAAZP,GACAT,EAAMmB,YAAYnB,EAAMoB,QAExBrB,GAAYA,KAGNX,EAAAe,aAAd,SAA2BL,EAAeC,QAAA,IAAAA,IAAAA,EAAA,MACtC,IACIQ,EADAC,EAAOV,EAAKW,SAASC,cAGrBH,EADQ,MAARC,EACYlB,EAAEQ,GAAMa,SAERrB,EAAEQ,GAGN,MAARU,GAAwB,MAARA,GAAwB,MAARA,GAAwB,cAARA,GAAgC,OAARA,GAAyB,KAARA,GACzFD,EAAUK,IAAI,WAAY,UAAUC,OAAON,EAAUM,UACrDN,EAAUO,QAAQ,CAACD,OAAU,KAAM,IAAK,WACpCN,EAAUX,SACVN,EAAE,6BAA6BM,SAC/BR,EAAyBC,wBACrBU,GAAYA,QAGpBQ,EAAUX,SACNG,GAAYA,MAG5BX,EAzGA,GAAaiC,EAAAjC,yBAAAA,EA4Gb,IAAAkC,EAAA,WACI,SAAAA,EAAoBC,EAAkBC,EAAgBC,EAAwBd,GAA1De,KAAAH,SAAAA,EAA0DG,KAAAf,OAAAA,EAC1E,IAAIgB,EAAoB,KACpBC,EAAoB,KACxBL,EAASM,QAAQ,CACbC,UAAa,OACbC,WAAa,EACbC,QAAW,SACXC,UAAa,SAAUJ,GACnB,IAAIK,EAAW5C,EAAOuC,GAmBtB,OAlBAK,EAASC,KAAK,UAAWZ,GACzBa,OAAOC,WAAW,WACd,IAAIC,EAAQJ,EAASI,QACjBC,EAAQhB,EAASiB,SAASC,IAC1BC,EAAWnB,EAASV,SACN,OAAdc,GAA8B,EAARW,IACtBX,EAAaH,EAASc,EAAQ,GAC9BV,EAAYH,EAAS,IACJc,EAAQ,KACrBX,EAAYW,EAAQ,IAERA,EAAQG,EAApBd,IACAA,EAAYW,EAAQG,IAG5BR,EAAStB,IAAI,OAAQe,EAAY,MACjCO,EAAStB,IAAI,MAAOgB,EAAY,OACjC,GACI,UAEXR,MAAQ,EACRuB,QAAWjB,KAAKkB,WAAWC,KAAKnB,QAGpCH,EAASM,QAAQ,QACMN,EAASuB,KAAK,cAC5BC,GAAG,YAAa,SAACC,GACtBA,EAAGC,oBAEPb,OAAOC,WAAWX,KAAKwB,sBAAsBL,KAAKnB,MAAO,KA8HjE,OA3HYJ,EAAA6B,UAAAP,WAAR,WACI,IAAIQ,EAAgB1B,KAAKH,SAErB8B,EAAMD,EAAMjB,KAAK,OACVmB,MAAPD,IACAA,EAAMD,EAAMzC,SAASwB,KAAK,QAE9BiB,EAAMG,QAAQ,eAAeC,QAAQV,KAAK,aAAeO,EAAM,KAAKI,SAAS,SAQ7E,IAAIC,EAAcpE,EADlB8B,6UAIA,GAFAsC,EAAIZ,KAAK,WAAWa,KAAK,OAAQP,EAAMjB,KAAK,SAASwB,KAAK,QAASC,IAAI,QAAS,wBAChFF,EAAIZ,KAAK,cAAce,KAAKD,IAAI,QAAS,gBAAkB,KAAOR,EAAMjB,KAAK,aACzEiB,EAAMnD,SAAS,WACfyD,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAK7B,OAAOgD,KAAKnB,OAC3FgC,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAKtB,OAAOyC,KAAKnB,YACxF,GAAI0B,EAAMnD,SAAS,WACtByD,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAK7B,OAAOgD,KAAKnB,OAC3FgC,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAKtB,OAAOyC,KAAKnB,YACxF,GAAuC,MAAnC0B,EAAM,GAAG3C,SAASC,cAAuB,CAChD,IAAIoD,EAAQV,EAAMzC,SACdmD,EAAM7D,SAAS,YACfyD,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAK7B,OAAOgD,KAAKnB,OAC3FgC,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAKtB,OAAOyC,KAAKnB,QACpFoC,EAAM7D,SAAS,YACtByD,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAK7B,OAAOgD,KAAKnB,OAC3FgC,EAAIZ,KAAK,iBAAiBe,KAAKD,IAAI,QAAS,kBAAkBb,GAAG,QAASrB,KAAKtB,OAAOyC,KAAKnB,QAE3F5D,QAAQC,IAAI,UAAW+F,QAG3BhG,QAAQC,IAAI,UAAWqF,GACvBW,MAAM,WAEV,OAAOL,GAGHpC,EAAA6B,UAAAD,sBAAR,WACI,OAAIxB,KAAKH,SAASyC,GAAG,UACV5B,OAAOC,WAAWX,KAAKwB,sBAAsBL,KAAKnB,MAAO,KAEtB,EAA1CpC,EAAE,QAAQwD,KAAK,kBAAkBnD,OAC1ByC,OAAOC,WAAWX,KAAKwB,sBAAsBL,KAAKnB,MAAO,UAEpEA,KAAKuC,WAGD3C,EAAA6B,UAAAe,mBAAR,WACI,IAAIb,EAAM3B,KAAKH,SAASY,KAAK,OAI7B,OAHWmB,MAAPD,IACAA,EAAM3B,KAAKH,SAASZ,SAASwB,KAAK,QAE/BT,KAAKH,SAASgC,QAAQ,eAAeT,KAAK,aAAeO,EAAM,MAGlE/B,EAAA6B,UAAAgB,oBAAR,SAA4BC,GACxB,IAAIC,EAAUjC,OAAOiC,QACjBC,EAAUlC,OAAOkC,QAErB5C,KAAKf,OAAO4D,qBACZ7C,KAAKuC,UACLG,EAAOI,KAAK9C,MACZA,KAAKf,OAAO8D,gBAEZrC,OAAOsC,SAASL,EAASC,IAGrBhD,EAAA6B,UAAAtD,OAAR,WAAA,IAAA8E,EAAAjD,KACIA,KAAKyC,oBAAoB,WACrBQ,EAAKT,qBAAqB3E,KAAK,SAACC,EAAGC,GAC/BL,EAAyBS,OAAOJ,EAAI,WAChCkF,EAAKhE,OAAOiE,mBAMpBtD,EAAA6B,UAAA/C,OAAR,WAAA,IAAAuE,EAAAjD,KACIA,KAAKyC,oBAAoB,WACrBQ,EAAKT,qBAAqB3E,KAAK,SAACC,EAAGC,GAC/BL,EAAyBgB,OAAOX,EAAI,WAChCkF,EAAKhE,OAAOiE,mBAMrBtD,EAAA6B,UAAAc,QAAP,WACIvC,KAAKH,SAASM,QAAQ,QAAQA,QAAQ,WAEtC,IAAIwB,EAAM3B,KAAKH,SAASY,KAAK,OAClBmB,MAAPD,IACAA,EAAM3B,KAAKH,SAASZ,SAASwB,KAAK,QAGtC,IAAI0C,GAAiB,EACrBnD,KAAKH,SAASgC,QAAQ,eAAeC,QAAQV,KAAK,aAAeO,EAAM,KAAK9D,KAAK,SAACC,EAAGC,GAC7EH,EAAEG,GAAIuE,GAAG,YACTa,GAAiB,KAGpBA,GACDnD,KAAKH,SAASgC,QAAQ,eAAeC,QAAQV,KAAK,aAAeO,EAAM,KAAKrC,YAAY,SAG5F,IAEI1B,EAAE,YAAYC,KAAK,SAACC,EAAGsF,GACnB,IAAMC,EAASzF,EAAEwF,GACZC,EAAO5C,KAAK,WAAW6B,GAAG,YAC3Be,EAAOlD,QAAQ,QAAQA,QAAQ,WAC/BkD,EAAOnF,SACP9B,QAAQkH,KAAK,yBAA0BD,MAGjD,MAAOE,MAGjB3D,EArKA,GAuKA4D,EAAA,WA0KI,SAAAA,EAAoBC,EAAyBC,EAAmCC,GAA5D3D,KAAAyD,QAAAA,EAAyBzD,KAAA0D,kBAAAA,EAAmC1D,KAAA2D,mBAAAA,EAxKxE3D,KAAA4D,cAAwB,KACxB5D,KAAA6D,YAAsB,EACtB7D,KAAA8D,iBAAmC,GAuKvC,IAAIC,EAAYN,EAAQrC,KAAK,eACzB4C,EAAO,IAAIC,EAAAC,mBAAmBH,EAAU9B,KAAK,OACjDjC,KAAKmE,WAAaH,EAAKI,YAEvBpE,KAAKqE,QAAQrE,KAAKmE,WAAWG,WAEzBb,EAAQhD,KAAK,eACbT,KAAK4D,cAAgBH,EAAQhD,KAAK,aAClCT,KAAKkD,aAGTlD,KAAKmE,WAAW9C,GAAG,SAAUrB,KAAKkD,UAAU/B,KAAKnB,OAEzD,OAlLYwD,EAAA/B,UAAA8C,YAAR,SAAoB7E,GAChB,IAAI8E,EAAgB5G,EAAE,QAAU8B,EAAO,UAGvC8E,EAAMpD,KAAK,gCAAgCvD,KAAK,SAACC,EAAGC,GAChD,IAAIsB,EAAgBzB,EAAEG,GAClB0G,EAAapF,EAAMoB,KAAK,eAC5BpB,EAAM+B,KAAK,QAAQW,SAAS,cAAcE,KAAK,mBAAoBwC,GAC9DxC,KAAK,YAAa5C,EAAMoB,KAAK,SAC7BwB,KAAK,gBAAiB5C,EAAMoB,KAAK,aACtCpB,EAAMC,YAAY,cAAcoF,WAAW,iBAI/CF,EAAMpD,KAAK,iBAAiB9B,YAAY,SACxCkF,EAAMpD,KAAK,UAAUvD,KAAKmC,KAAK2E,qBAAqBxD,KAAKnB,OAEzD,IAAI4E,EAAUJ,EAAM9E,OACpBM,KAAKmE,WAAWU,QAAQD,GACxB5E,KAAK4D,cAAgB5D,KAAK8E,cAAc9E,KAAKmE,WAAWG,WACxDtE,KAAKmE,WAAWY,KAAK,gBACrB/E,KAAKkD,aAGFM,EAAA/B,UAAAuD,mBAAP,SAA0BC,GACtBjF,KAAK8D,iBAAiBnH,KAAKsI,IAGvBzB,EAAA/B,UAAAkD,qBAAR,SAA6B7G,EAAGC,GAC5B,IAEImH,EAFA5G,EAAQV,EAAEG,GACVoH,EAAe7G,EAAMmC,KAAK,4BAQ9ByE,GAJIA,EADA5G,EAAMC,SAAS,YACT2D,IAAI,MAAO,wBAEXA,IAAI,MAAO,uBAEXkD,QAAQ,WAAaD,EAAe,GAEpB,OAAtB7G,EAAM,GAAGS,WACTT,EAAQA,EAAMW,UAGlBX,EAAM2D,KAAK,kBAAmBiD,IAG1B1B,EAAA/B,UAAA4D,mBAAR,WAAA,IAAApC,EAAAjD,KACIA,KAAKyD,QAAQpC,GAAG,YAAa,cAAe,SAACC,GACzC,IAAMgE,EAAU1H,EAAE0D,EAAGiE,eACmE,EAApFD,EAAQzD,QAAQ,qBAAqBC,QAAQV,KAAK,yBAAyBnD,SAG3EuH,EAAsBC,aACtBD,EAAsBC,YAAYlD,UAEtCiD,EAAsBC,YAAc,IAAI7F,EAAyB0F,EAAShE,EAAGoE,MAAOpE,EAAGqE,MAAO1C,OAK/FO,EAAA/B,UAAAmE,UAAP,WAAA,IAAA3C,EAAAjD,KACIA,KAAK6C,qBACL7C,KAAKyD,QAAQrC,KAAK,YAAYvD,KAAK,SAACC,EAAGC,GACnCL,EAAyBc,aAAaT,KAE1CiC,KAAKyD,QAAQrC,KAAK,YAAYvD,KAAK,SAACC,EAAGC,GACnCL,EAAyBe,aAAaV,KAE1CiC,KAAKkD,YACLxC,OAAOC,WAAW,WAEdsC,EAAKC,YACLD,EAAKJ,sBACN,MAGAW,EAAA/B,UAAAoE,UAAP,WAAA,IAAA5C,EAAAjD,KACIA,KAAK6C,qBACL7C,KAAKyD,QAAQrC,KAAK,YAAYvD,KAAK,SAACC,EAAGC,GACnCL,EAAyBiB,aAAaf,EAAEG,MAE5CiC,KAAKyD,QAAQrC,KAAK,YAAYvD,KAAK,SAACC,EAAGC,GACnCL,EAAyBkB,aAAahB,EAAEG,MAE5CiC,KAAKkD,YACLxC,OAAOC,WAAW,WAEdsC,EAAKC,YACLD,EAAKJ,sBACN,MAGAW,EAAA/B,UAAAoB,mBAAP,WACI7C,KAAKmE,WAAWY,KAAK,iBAGlBvB,EAAA/B,UAAAsB,cAAP,aAKOS,EAAA/B,UAAAP,WAAP,WACI,OAAOlB,KAAKmE,WAAWG,WAGpBd,EAAA/B,UAAAqE,oBAAP,WACI,OAAO9F,KAAK4D,eAGTJ,EAAA/B,UAAA4C,QAAP,SAAe3E,GACXM,KAAKuE,YAAY7E,GACjBM,KAAKqF,sBAGD7B,EAAA/B,UAAAqD,cAAR,SAAsBpF,GAClB,IAAMqG,EAAW,CACbC,SAAU,IACVC,UAAW,IACXC,SAAU,IACVC,SAAU,IACVC,SAAU,IACVC,SAAU,IACVC,SAAU,IACVC,SAAU,IACVC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,SAAU,IACVC,SAAU,IACVC,WAAY,IACZC,UAAW,IACXC,SAAU,KAMd,OAJAnL,OAAOC,KAAKkK,GAAUjK,QAAQ,SAAAkL,GAC1BtH,EAAOA,EAAK0F,QAAQ,IAAI6B,OAAOD,EAAK,KAAMjB,EAASiB,MAGhDtH,EAAK0F,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAC9CA,QAAQ,uBAAwB,WAChCA,QAAQ,cAAe,WACvBA,QAAQ,WAAY,KAGtB5B,EAAA/B,UAAAyB,UAAP,WACQlD,KAAK8E,cAAc9E,KAAKmE,WAAWG,aAAetE,KAAK4D,eACvD5D,KAAK0D,kBAAkB3B,SAAS,aAChC/B,KAAK6D,YAAa,IAElB7D,KAAK0D,kBAAkBpE,YAAY,aACnCU,KAAK6D,YAAa,GAEqB,EAAvC7D,KAAKyD,QAAQrC,KAAK,YAAYnD,QAAqD,EAAvC+B,KAAKyD,QAAQrC,KAAK,YAAYnD,OAC1E+B,KAAK2D,mBAAmBrE,YAAY,UAEpCU,KAAK2D,mBAAmB5B,SAAS,UAErC/B,KAAK8D,iBAAiBhI,QAAQ,SAAAmJ,GAAM,OAAAA,OAGjCzB,EAAA/B,UAAAyF,WAAP,WACI,OAAOlH,KAAK6D,YAiBpBL,EAxLA,GA0LA2D,EAAA,WAQI,SAAAA,EAAoB1D,EAAiB2D,EAAYC,GAAjD,IAAApE,EAAAjD,KAAoBA,KAAAyD,QAAAA,EAJbzD,KAAAsH,mBAAoB,EACpBtH,KAAAuH,kBAA8B,GAIjCvH,KAAKwH,UAAYlK,SAASmG,EAAQhD,KAAK,cACvCT,KAAKyH,YAAcnK,SAASmG,EAAQhD,KAAK,gBAEzC,IAAMiH,EAAiBN,EAAMO,YAAcP,EAAMO,WAAW3H,KAAKwH,UAAY,IAAMxH,KAAKyH,aAAeL,EAAMO,WAAW3H,KAAKwH,UAAY,IAAMxH,KAAKyH,aAAe,KAC/JC,EAAeH,oBACfvH,KAAKuH,kBAAoBG,EAAeH,mBAG5C,IAAMxD,EAAYN,EAAQrC,KAAK,qBACzBwG,EAAWnE,EAAQrC,KAAK,qBACxBuC,EAAqBF,EAAQrC,KAAK,sBACxCpB,KAAK6H,SAAW,IAAIrE,EAA8BO,EAAW6D,EAAUjE,GAEvE3D,KAAK8H,cACL9H,KAAK+H,6BACL/H,KAAKgI,iBAAiBX,GAEtB5D,EAAQrC,KAAK,oBAAoBvD,KAAK,SAACC,EAAWmK,GAC9C1M,EAAkBkB,kBAAkBmB,EAAEqK,GAASxH,KAAK,gBAAiBwC,KAGzEjD,KAAK6H,SAAS7C,mBAAmB,WAAM,OAAA/B,EAAKqE,mBAAoB,IAgNxE,OA7MYH,EAAA1F,UAAAuG,iBAAR,SAAyBX,GAErB,IADA,IAAMa,EAAyBlI,KAAKyD,QAAQrC,KAAK,4BAA4BX,KAAK,yBACzE3C,GACL,IAAM/B,EAAcmM,EAAuBpK,GAAG/B,YAC9CmM,EAAuBpK,GAAc,UAAIuJ,EAAoBjG,KAAK,SAAA+G,GAAS,OAAAA,EAAMC,KAAOrM,IACxFmM,EAAuBpK,GAAW,OAAIvC,EAAkBe,mBAAmBP,GAC3EmM,EAAuBpK,GAAY,QAAIvC,EAAkBgB,oBAAoBR,GAC7EmM,EAAuBpK,GAAe,WAAIuK,KAAKC,MAAMD,KAAKE,UAAUhN,EAAkBiB,uBAAuBT,MALxG+B,EAAI,EAAGA,EAAIoK,EAAuBjK,OAAQH,MAA1CA,GAQT,IAAM0K,EAAOxI,KAEPyI,EAAsB,SAACxD,GACrBuD,EAAKX,SAASX,aACdwB,QAAQC,QAAQzG,IAAI,QAAS,mBAAoB,SAAC0G,GAC1CA,GACA3D,MAIRA,KAIRuD,EAAKK,aAAe,IAAIC,IAAI,CACxB/K,GAAIiC,KAAKyD,QAAQrC,KAAK,4BAA4B,GAClD2H,SAAU,81BAaVtI,KAAM,CACFyH,uBAAsBA,GAE1Bc,QAAO,WAEHhJ,KAAKiJ,IAAI,iBAAkB,SAAUxI,GACjC,IAAMyI,EAAYzI,EAAK,GACnB0I,EAAYnJ,KAAKoJ,iBAAiB3I,EAAK,IACvC0I,IACAA,EAAUjN,OAASgN,EACdV,EAAKX,SAASX,eACfiC,EAAUE,QAAkI,IAAxH,CAACnO,EAAiBC,EAA0BC,EAAkBC,EAAgBC,GAAkBgO,QAAQJ,GAC5HV,EAAKe,iBAIjBvJ,KAAKiJ,IAAI,iBAAkB,SAAUxI,GACjC,IAAM0I,EAAYnJ,KAAKoJ,iBAAiB3I,EAAK,IACzC0I,IACAA,EAAUxN,WAAa8E,EAAK,MAGpCT,KAAKiJ,IAAI,kBAAmB,SAAUxI,GAClC,IAAM0I,EAAYnJ,KAAKoJ,iBAAiB3I,EAAK,IACzC0I,IACAA,EAAUhN,QAAUsE,EAAK,GACpB+H,EAAKX,SAASX,cACfsB,EAAKe,iBAKrBC,QAAS,CACLC,oBAAmB,WACf,OAAOzJ,KAAKkI,wBAEhBkB,iBAAgB,SAACrN,GACb,IAAK,IAAI+B,EAAI,EAAGA,EAAIkC,KAAKkI,uBAAuBjK,OAAQH,IACpD,GAAIkC,KAAKkI,uBAAuBpK,GAAG/B,aAAeA,EAC9C,OAAOiE,KAAKkI,uBAAuBpK,GAG3C,OAAO,MAEX4L,mBAAkB,SAAC3N,EAAasN,GAC5BrJ,KAAKoJ,iBAAiBrN,GAAasN,OAASA,EAC5Cb,EAAKe,cAETI,OAAM,SAACC,GAAP,IAAA3G,EAAAjD,KAEU6J,EAAKD,EAAU,GACf7N,EAAc6N,EAAU,GAE9B,GADgB5J,KAAKoJ,iBAAiBrN,GACtC,CAGA,OAAQ8N,GACJ,IAAK,aACDpB,EAAoB,WAAM,OAAAxF,EAAKyG,mBAAmB3N,EAAa6N,EAAU,MACzE,MACJ,IAAK,aACDrO,EAAkBqB,UAAUb,EAAauB,SAASsM,EAAU,KAC5D,MACJ,IAAK,YACDxN,QAAQC,IAAI,YACZd,EAAkByB,aAAajB,EAAa6N,EAAU,IACtD,MACJ,IAAK,cACDnB,EAAoB,WAEhBlN,EAAkBuB,WAAWf,EAAa6N,EAAU,IACpDpB,EAAKe,eAIjBf,EAAKlB,mBAAoB,QAMlCH,EAAA1F,UAAA1E,0BAAP,SAAiChB,EAAqBI,GAClD6D,KAAK6I,aAAaiB,MAAM,kBAAmB,CAAC/N,EAAaI,KAGtDgL,EAAA1F,UAAAvE,yBAAP,SAAgCnB,EAAqBJ,GACjDqE,KAAK6I,aAAaiB,MAAM,iBAAkB,CAAC/N,EAAaJ,KAGrDwL,EAAA1F,UAAA5E,yBAAP,SAAgCd,EAAqBG,GACjD8D,KAAK6I,aAAaiB,MAAM,iBAAkB,CAAC/N,EAAaG,KAIpDiL,EAAA1F,UAAAsG,2BAAR,WAAA,IAAA9E,EAAAjD,KACIA,KAAKyD,QAAQpC,GAAG,QAAS,uBAAwB,SAACC,GAC9C,IAAMyI,EAAanM,EAAE0D,EAAGiE,eAAe1D,QAAQ,uBAAuBC,QAChE/F,EAAcuB,SAASyM,EAAWtJ,KAAK,gBAAiB,IACxDuJ,EAAmBD,EAAW9K,SACpC8K,EAAW7L,SACgC,IAAvC8L,EAAiBxK,WAAWvB,QAC5BgF,EAAKQ,QAAQnE,YAAY,iBAE7B2D,EAAKsE,kBAAkB5K,KAAKZ,GAC5BkH,EAAKqE,mBAAoB,KAIzBH,EAAA1F,UAAAqG,YAAR,WAAA,IAAA7E,EAAAjD,KACIA,KAAKyD,QAAQrC,KAAK,iCAAiCC,GAAG,QAAS,SAAAC,GAC3DA,EAAG2I,iBACHhH,EAAK4E,SAASjC,YACd3C,EAAKqE,mBAAoB,IAG7BtH,KAAKyD,QAAQrC,KAAK,iCAAiCC,GAAG,QAAS,SAAAC,GAC3DA,EAAG2I,iBACHhH,EAAK4E,SAAShC,YACd5C,EAAKqE,mBAAoB,KAIzBH,EAAA1F,UAAA8H,WAAR,WAAA,IAAAtG,EAAAjD,KACUkK,EAAalK,KAAK6I,aAAaY,sBAChCU,OAAO,SAAAC,GAAiB,OAAAA,EAAcf,SACtCjM,IAAI,SAAAgN,GACD,MAAO,CACHhC,GAAIgC,EAAcrO,YAClBI,QAASZ,EAAkBgB,oBAAoB6N,EAAcrO,gBAGnEsO,EAAMrK,KAAKyD,QAAQhD,KAAK,cAAc2E,QAAQ,QAASiD,KAAKE,UAAU2B,IAC5EtM,EAAE0M,IAAID,EAAK,SAAC5J,GACRwC,EAAK4E,SAASxD,QAAQ5D,EAAK0B,MAE3B,IAAIoI,EAAa,GACjB9J,EAAK8J,WAAWzO,QAAQ,SAAA0O,GACpBD,GAAcC,IAGlBvH,EAAKQ,QAAQrC,KAAK,qBAAqB1B,KAAK6K,GACf,EAAzB9J,EAAK8J,WAAWtM,OAChBgF,EAAKQ,QAAQ1B,SAAS,iBAEtBkB,EAAKQ,QAAQnE,YAAY,iBAE7B2D,EAAKsE,kBAAoB,GACzBtE,EAAKqE,mBAAoB,KAI1BH,EAAA1F,UAAAgJ,aAAP,WAII,MAAO,CACHC,iBAJqB1K,KAAK6I,aAAaY,sBACtCU,OAAO,SAAAC,GAAiB,OAAAA,EAAcf,SACtCjM,IAAI,SAAAgN,GAAiB,OAAAA,EAAcrO,cAGpCoG,KAAMnC,KAAK6H,SAAS3G,aACpByJ,UAAW3K,KAAK6H,SAAS/B,sBACzByB,kBAAmBvH,KAAKuH,oBAIzBJ,EAAA1F,UAAAmJ,eAAP,WACI5K,KAAKsH,mBAAoB,GAEjCH,EA9OA,GAmPA3B,EAAA,WASI,SAAAA,EAAYqF,GAAZ,IAAA5H,EAAAjD,KAHQA,KAAA2H,WAA+C,GAC/C3H,KAAAsH,mBAAoB,EAGxB9B,EAAsBqF,MAAQA,EAE9B,IAAMzD,EAAQiB,KAAKC,MAAMwC,SAASC,eAAe,cAAcC,aAAa,UAC5EzP,EAAkBC,KAAK4L,EAAM6D,kBAAmB7D,EAAM8D,kBAAmB9D,EAAM+D,qBAE/E,IAAM9D,EAAsBwD,EAAMpK,KAAK,yBAEvC7C,EAAE,qBAAqBC,KAAK,SAACC,EAAGC,GAC5B,IAAMqN,EAAQxN,EAAEG,GAChBqN,EAAMhK,KAAK,qBAAqBC,GAAG,YAAa,SAACC,GAC7CkE,EAAsB6F,WAAa/J,EAAGgK,UAG1CrI,EAAK0E,WAAWhL,KAAK,IAAIwK,EAA+BiE,EAAOhE,EAAOC,MAG1E7B,EAAsBqF,MAAMxJ,GAAG,SAAU,WACrC4B,EAAKqE,mBAAoB,EACzBrE,EAAKsI,WAAU,GACf3N,EAAE8C,QAAQ8K,IAAI,eAAgBhG,EAAsBiG,eAExD7N,EAAE8C,QAAQW,GAAG,eAAgBmE,EAAsBiG,aAEnDzL,KAAK0L,kBACL1L,KAAK2L,yBACL3L,KAAK4L,2BAwKb,OArKkBpG,EAAAiG,YAAd,WACI,OAAOvJ,IAAI,MAAO,uBAGdsD,EAAA/D,UAAAoK,aAAR,SAAqBC,GACjB9L,KAAK+L,kBAAkB3K,KAAK,oBAAoB4K,OAEhD,IAKIC,EAAerO,EAAE,QAAQqE,KAAK,QAC9BiK,EAAY,IAAIC,KAAKC,eAAeH,EAN1B,CACNI,KAAM,UAAWC,MAAO,UAAWC,IAAK,UACxCC,KAAM,UAAWC,OAAQ,UACzBC,QAAQ,IAGuCC,OAAOb,GAE9D9L,KAAK+L,kBAAkB3K,KAAK,qBAAqBe,KAAK+J,IAGlD1G,EAAA/D,UAAAmK,yBAAR,WACIpG,EAAsBqF,MAAMzJ,KAAK,uCAAuCC,GAAG,SAAU,SAAAC,GACjF,IAAMsL,EAAYhP,EAAE0D,EAAGiE,eACjBsH,EAAWD,EAAU/K,QAAQ,YAAYC,QAC3C8K,EAAUE,KAAK,WACfD,EAASzL,KAAK,kBAAkBW,SAAS,UAEzC8K,EAASzL,KAAK,kBAAkB9B,YAAY,YAEjDgB,QAAQ,WAGPkF,EAAA/D,UAAA8J,UAAR,SAAkBwB,GAAlB,IAAA9J,EAAAjD,KACI,QADc,IAAA+M,IAAAA,GAAA,GACsD,IAAhE/M,KAAK2H,WAAWwC,OAAO,SAAA6C,GAAO,OAAAA,EAAI1F,oBAAmBrJ,QAAiB+B,KAAKsH,kBAA/E,CAGAlL,QAAQC,IAAI,uBAEZ,IAAMoE,EAAO,CACTwK,kBAAqB1P,EAAkBgC,iBACvC2N,kBAAqB3P,EAAkBiC,iBACvC2N,oBAAuB5P,EAAkBkC,mBACzCkK,WAAc,GACdsF,SAAY,GACZC,gBAAmB,IAEvBtP,EAAE,iBAAiBC,KAAK,SAACC,EAAGC,GACxB,IAAM8O,EAAWjP,EAAEG,GACfyJ,EAAYqF,EAASpM,KAAK,cAC9BA,EAAKwM,SAASzF,GAAaqF,EAASzL,KAAK,iBAAiB+L,QAE9D3H,EAAsBqF,MAAMzJ,KAAK,+CAA+CvD,KAAK,SAACC,EAAGC,GACrF0C,EAAKyM,gBAAgBvQ,KAAKW,SAASM,EAAEG,GAAIoP,UAG7CnN,KAAK2H,WAAW7L,QAAQ,SAAA0M,GACpB/H,EAAKkH,WAAWa,EAAKhB,UAAY,IAAMgB,EAAKf,aAAee,EAAKiC,iBAEpE,IAAI2C,EAAoBpN,KAAK+L,kBAAkB3K,KAAK,sBAAsB0L,KAAK,WAEzEO,EAAUhF,KAAKE,UAAU9H,GAC/BqK,SAASC,eAAe,cAAcuC,aAAa,QAASD,GAEvDN,GACDnP,EAAE2P,KAAK,CACHC,KAAM,OACNnD,IAAK7E,EAAsBqF,MAAMpK,KAAK,kBACtCA,KAAM,CACFgN,OAAWL,EAAW,EAAI,EAC1B3M,KAAM4M,EACNK,MAASlI,EAAsBqF,MAAMzJ,KAAK,uBAAuB+L,OAErEQ,QAAS,SAACC,GACFA,EAAa,SACb3K,EAAK8I,kBAAkB3K,KAAK,gBAAgBW,SAAS,UACrDkB,EAAK4I,aAAa,IAAIgC,KAAKD,EAAU,OACjCR,EACA5H,EAAsBqF,MAAMzJ,KAAK,eAAe9B,YAAY,UAE5DkG,EAAsBqF,MAAMzJ,KAAK,eAAeW,SAAS,YAG7DkB,EAAK8I,kBAAkB3K,KAAK,gBAAgB9B,YAAY,UACxD2D,EAAK8I,kBAAkB3K,KAAK,8BAA8BW,SAAS,UACnEkB,EAAK8I,kBAAkB3K,KAAK,6BAA6Be,KAAKyL,EAAW,OAAGtO,YAAY,WAG5F2D,EAAK0E,WAAW7L,QAAQ,SAAAkR,GAAO,OAAAA,EAAIpC,mBACnC3H,EAAKqE,mBAAoB,GAE7BwG,MAAO,WACH7K,EAAK8I,kBAAkB3K,KAAK,gBAAgB9B,YAAY,UACxD2D,EAAK8I,kBAAkB3K,KAAK,8BAA8B9B,YAAY,UACtE2D,EAAK8I,kBAAkB3K,KAAK,6BAA6Be,KAAK,IAAIJ,SAAS,eAMnFyD,EAAA/D,UAAAsM,oBAAR,WAAA,IAAA9K,EAAAjD,KACQgO,EAAkBhO,KAAK+L,kBAAkB3K,KAAK,wBAQlD,GANAV,OAAOuN,YAAY,WACXD,EAAQlB,KAAK,YACb7J,EAAKsI,WAAU,IAEpB,KAEC2C,aAAc,CACd,IAAIC,EAAQD,aAAaE,QAAQ,2BACnB,OAAVD,GACAH,EAAQlB,KAAK,UAAqB,KAATqB,GAGjCH,EAAQ3M,GAAG,SAAU,WACjB,IAAIgI,EAAkB2E,EAAQlB,KAAK,WAC/BoB,cACAA,aAAaG,QAAQ,0BAA4BhF,EAAS,IAAM,OAErE/I,QAAQ,WAGPkF,EAAA/D,UAAAiK,gBAAR,WAAA,IAAAzI,EAAAjD,KAYI,GAXAA,KAAK+L,kBAAoBvG,EAAsBqF,MAAMzJ,KAAK,qBAC1DpB,KAAK+L,kBAAkB3K,KAAK,cAAcC,GAAG,QAAS,WAClD4B,EAAKqE,mBAAoB,EACzBrE,EAAKsI,WAAU,KAEnBvL,KAAK+L,kBAAkB3K,KAAK,sBAAsBC,GAAG,SAAU,WAC3D4B,EAAKqE,mBAAoB,EACzBrE,EAAKsI,WAAU,KAEnBvL,KAAK+N,sBAED/N,KAAK+L,kBAAkBtL,KAAK,gBAAiB,CAC7C,IAAIqL,EAAO,IAAI+B,KAAK7N,KAAK+L,kBAAkBtL,KAAK,iBAChDT,KAAK6L,aAAaC,GAGtBlO,EAAE,iBAAiByD,GAAG,SAAU,WAAM,OAAA4B,EAAKqE,mBAAoB,IAE/D1J,EAAE,sBAAsBM,UAGpBsH,EAAA/D,UAAAkK,uBAAR,WAAA,IAAA1I,EAAAjD,KACIU,OAAOuN,YAAY,WACf,IAAI5D,EAAM7E,EAAsBqF,MAAMpK,KAAK,kBACrC6N,EAAe/S,EAAkB4B,kBACvCkN,EAAMA,EAAIjF,QAAQ,aAAckJ,EAAaC,KAAK,MAClD3Q,EAAE0M,IAAID,EAAK,SAAA5J,GACHA,EAAc,QACdwC,EAAKuL,wBAAwB/N,EAAU,IAAGA,EAAc,SAExDrE,QAAQkH,KAAK7C,MAGtB,MAGC+E,EAAA/D,UAAA+M,wBAAR,SAAgCC,EAAsBC,GAClD,IAAMC,EAAyB,GAC/BF,EAA0B,WAAE3S,QAAQ,SAAAsO,GAChCuE,EAAuBvE,EAAkB,IAAKA,EAC9C,IAAMlO,EAASuS,EAAsB,OAAErE,EAAkB,IACzD7O,EAAkBU,qBAAqBmO,EAAkB,GAAGlO,EAAe,OAAGA,EAAgB,QAAGA,EAAmB,eAvM9GsJ,EAAAC,YAAwC,KACxCD,EAAA6F,WAAqB,KAyMvC7F,EA3MA,GAAa7F,EAAA6F,sBAAAA","file":"MotionMergeAmendments.js","sourcesContent":["import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\nimport { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\nenum AMENDMENT_VERSION {\n    ORIGINAL = 'orig',\n    PROPOSED_PROCEDURE = 'prop',\n}\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static registerNewAmendment(amendmentId: number, status: number, version: AMENDMENT_VERSION, votingData: VotingData) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.votingData[amendmentId] = votingData;\n\n        console.log(\"registered new amendment status\", AmendmentStatuses.statuses, AmendmentStatuses.versions, AmendmentStatuses.votingData);\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n    public static getAmendmentIds(): number[] {\n        return Object.keys(AmendmentStatuses.statuses).map(key => parseInt(key, 10));\n    }\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nexport class MotionMergeChangeActions {\n    public static removeEmptyParagraphs() {\n        $('.texteditor').each((i, el) => {\n            if (el.childNodes.length == 0) {\n                $(el).remove();\n            }\n        });\n    }\n\n    public static accept(node: Element, onFinished: () => void = null) {\n        let $node = $(node);\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertAccept(node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteAccept(node, onFinished);\n        }\n    }\n\n    public static reject(node: Element, onFinished: () => void = null) {\n        let $node = $(node) as JQuery;\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertReject($node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteReject($node, onFinished);\n        }\n    }\n\n    public static insertReject($node: JQuery, onFinished: () => void = null) {\n        let $removeEl: JQuery,\n            name = $node[0].nodeName.toLowerCase();\n        if (name == 'li') {\n            $removeEl = $node.parent();\n        } else {\n            $removeEl = $node;\n        }\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n\n    public static insertAccept(node: Element, onFinished: () => void = null) {\n        let $this = $(node) as JQuery;\n        $this.removeClass(\"ice-cts ice-ins appendHint moved\");\n        $this.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        if (node.nodeName.toLowerCase() == 'ul' || node.nodeName.toLowerCase() == 'ol') {\n            $this.children().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'li') {\n            $this.parent().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'ins') {\n            $this.replaceWith($this.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteReject($node: JQuery, onFinished: () => void = null) {\n        $node.removeClass(\"ice-cts ice-del appendHint\");\n        $node.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        let nodeName = $node[0].nodeName.toLowerCase();\n        if (nodeName == 'ul' || nodeName == 'ol') {\n            $node.children().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'li') {\n            $node.parent().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'del') {\n            $node.replaceWith($node.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteAccept(node: Element, onFinished: () => void = null) {\n        let name = node.nodeName.toLowerCase(),\n            $removeEl: JQuery;\n        if (name == 'li') {\n            $removeEl = $(node).parent() as JQuery;\n        } else {\n            $removeEl = $(node) as JQuery;\n        }\n\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n}\n\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\");\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '<div>';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(i, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>')\n            .replace(/<[^>]*ice-ins[^>]*>/g, 'ice-ins') // make sure accepted insertions are still recognized as change\n            .replace(/<ins[^>]*>/g, 'ice-ins')\n            .replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = new Vue({\n            el: this.$holder.find(\".changeToolbar .statuses\")[0],\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data: {\n                amendmentParagraphData,\n            },\n            created() {\n                // Methods / callbacks called by the status manager\n                this.$on('status-updated', function (data) {\n                    const newStatus = data[1],\n                        amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                });\n                this.$on('voting-updated', function (data) {\n                    const amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.votingData = data[1];\n                    }\n                });\n                this.$on('version-updated', function (data) {\n                    const amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.version = data[1];\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                });\n            },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendmentId, active) {\n                    this.getAmendmentData(amendmentId).active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendmentId, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            console.log(\"setVotes\");\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                }\n            }\n        });\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidget.$emit('version-updated', [amendmentId, version]);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidget.$emit('voting-updated', [amendmentId, votingData]);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidget.$emit('status-updated', [amendmentId, status]);\n    }\n\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidget.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = this.statusWidget.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => amendmentData.amendmentId);\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    private paragraphs: MotionMergeAmendmentsParagraph[] = [];\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphs.push(new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData));\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initCheckBackendStatus();\n        this.initRemovingSectionTexts();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (this.paragraphs.filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            return;\n        }\n        console.log(\"Has unsaved changes\");\n\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        this.paragraphs.forEach(para => {\n            data.paragraphs[para.sectionId + '_' + para.paragraphId] = para.getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSavingUrl'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    this.paragraphs.forEach(par => par.onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n\n    private initCheckBackendStatus() {\n        window.setInterval(() => {\n            let url = MotionMergeAmendments.$form.data('checkStatusUrl');\n            const amendmentIds = AmendmentStatuses.getAmendmentIds();\n            url = url.replace(/AMENDMENTS/, amendmentIds.join(','));\n            $.get(url, data => {\n                if (data['success']) {\n                    this.onReceivedBackendStatus(data['new'], data['deleted']);\n                } else {\n                    console.warn(data);\n                }\n            });\n        }, 5000);\n    }\n\n    private onReceivedBackendStatus(newAmendments: any[], deletedAmendments: any[]) {\n        const newAmendmentStaticData = {};\n        newAmendments['staticData'].forEach(amendmentData => {\n            newAmendmentStaticData[amendmentData['id']] = amendmentData;\n            const status = newAmendments['status'][amendmentData['id']];\n            AmendmentStatuses.registerNewAmendment(amendmentData['id'], status['status'], status['version'], status['votingData']);\n        });\n    }\n}\n"]}