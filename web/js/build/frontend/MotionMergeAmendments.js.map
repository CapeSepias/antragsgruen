{"version":3,"sources":["frontend/MotionMergeAmendments.ts"],"names":["AMENDMENT_VERSION","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AmendmentStatuses","init","statuses","versions","votingData","Object","keys","forEach","amendmentId","statusListeners","getAmendmentStatus","getAmendmentVersion","getAmendmentVotingData","registerParagraph","paragraph","push","setStatus","status","onAmendmentStatusChanged","setVersion","version","onAmendmentVersionChanged","setVotesData","voteData","onAmendmentVotingChanged","getAllStatuses","getAllVersions","getAllVotingData","MotionMergeChangeActions","removeEmptyParagraphs","$","each","i","el","childNodes","length","remove","accept","node","onFinished","$node","hasClass","insertAccept","deleteAccept","reject","insertReject","deleteReject","$removeEl","name","nodeName","toLowerCase","parent","css","height","animate","$this","removeClass","removeAttr","children","replaceWith","html","exports","MotionMergeChangeTooltip","$element","mouseX","mouseY","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","data","window","setTimeout","width","elTop","offset","top","elHeight","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","prototype","$myEl","cid","undefined","parents","first","addClass","$el","attr","__t","text","$list","console","log","alert","is","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","_this","onChanged","focusAtSameCid","stale","$stale","warn","e","MotionMergeAmendmentsTextarea","$holder","$changedIndicator","$mergeActionHolder","unchangedText","hasChanged","changedListeners","$textarea","edit","AntragsgruenEditor_1","AntragsgruenEditor","texteditor","getEditor","setText","getData","prepareText","$text","appendHint","removeData","markupMovedParagraph","newText","setData","normalizeHtml","fire","addChangedListener","cb","msg","paragraphNew","replace","initializeTooltips","$target","currentTarget","MotionMergeAmendments","activePopup","pageX","pageY","acceptAll","rejectAll","getUnchangedContent","entities","&nbsp;","&ndash;","&auml;","&ouml;","&uuml;","&Auml;","&Ouml;","&Uuml;","&szlig;","&bdquo;","&ldquo;","&bull;","&sect;","&eacute;","&rsquo;","&euro;","ent","RegExp","hasChanges","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","parseInt","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","amendmentParagraphData","amend","id","JSON","parse","stringify","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","template","created","$on","newStatus","amendment","getAmendmentData","active","indexOf","reloadText","methods","getAllAmendmentData","setAmendmentActive","update","eventData","op","$emit","$collision","$collisionHolder","preventDefault","amendments","filter","amendmentData","map","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","document","getElementById","getAttribute","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initRemovingSectionTexts","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","onlyInput","par","sections","removedSections","val","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem"],"mappings":"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","file":"MotionMergeAmendments.js","sourcesContent":["import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\nimport { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\nenum AMENDMENT_VERSION {\n    ORIGINAL = 'orig',\n    PROPOSED_PROCEDURE = 'prop',\n}\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nexport class MotionMergeChangeActions {\n    public static removeEmptyParagraphs() {\n        $('.texteditor').each((i, el) => {\n            if (el.childNodes.length == 0) {\n                $(el).remove();\n            }\n        });\n    }\n\n    public static accept(node: Element, onFinished: () => void = null) {\n        let $node = $(node);\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertAccept(node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteAccept(node, onFinished);\n        }\n    }\n\n    public static reject(node: Element, onFinished: () => void = null) {\n        let $node = $(node) as JQuery;\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertReject($node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteReject($node, onFinished);\n        }\n    }\n\n    public static insertReject($node: JQuery, onFinished: () => void = null) {\n        let $removeEl: JQuery,\n            name = $node[0].nodeName.toLowerCase();\n        if (name == 'li') {\n            $removeEl = $node.parent();\n        } else {\n            $removeEl = $node;\n        }\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n\n    public static insertAccept(node: Element, onFinished: () => void = null) {\n        let $this = $(node) as JQuery;\n        $this.removeClass(\"ice-cts ice-ins appendHint moved\");\n        $this.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        if (node.nodeName.toLowerCase() == 'ul' || node.nodeName.toLowerCase() == 'ol') {\n            $this.children().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'li') {\n            $this.parent().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'ins') {\n            $this.replaceWith($this.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteReject($node: JQuery, onFinished: () => void = null) {\n        $node.removeClass(\"ice-cts ice-del appendHint\");\n        $node.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        let nodeName = $node[0].nodeName.toLowerCase();\n        if (nodeName == 'ul' || nodeName == 'ol') {\n            $node.children().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'li') {\n            $node.parent().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'del') {\n            $node.replaceWith($node.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteAccept(node: Element, onFinished: () => void = null) {\n        let name = node.nodeName.toLowerCase(),\n            $removeEl: JQuery;\n        if (name == 'li') {\n            $removeEl = $(node).parent() as JQuery;\n        } else {\n            $removeEl = $(node) as JQuery;\n        }\n\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n}\n\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\");\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '<div>';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(i, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>').replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = new Vue({\n            el: this.$holder.find(\".changeToolbar .statuses\")[0],\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data: {\n                amendmentParagraphData,\n            },\n            created() {\n                // Methods / callbacks called by the status manager\n                this.$on('status-updated', function (data) {\n                    const newStatus = data[1],\n                        amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                });\n                this.$on('voting-updated', function (data) {\n                    const amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.votingData = data[1];\n                    }\n                });\n                this.$on('version-updated', function (data) {\n                    const amendment = this.getAmendmentData(data[0]);\n                    if (amendment) {\n                        amendment.version = data[1];\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                });\n            },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendmentId, active) {\n                    this.getAmendmentData(amendmentId).active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendmentId, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                }\n            }\n        });\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidget.$emit('version-updated', [amendmentId, version]);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidget.$emit('voting-updated', [amendmentId, votingData]);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidget.$emit('status-updated', [amendmentId, status]);\n    }\n\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidget.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = [];\n        this.$holder.find(\".amendmentStatus\").each((id, el) => {\n            const $el = $(el);\n            if ($el.find(\".toggleActive\").length > 0) {\n                amendmentToggles.push($el.data(\"amendment-id\"));\n            }\n        });\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    private paragraphs: MotionMergeAmendmentsParagraph[] = [];\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n        console.log(amendmentStaticData);\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphs.push(new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData));\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initRemovingSectionTexts();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (this.paragraphs.filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            console.log(\"Has no unsaved changes\");\n            return;\n        }\n\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        this.paragraphs.forEach(para => {\n            data.paragraphs[para.sectionId + '_' + para.paragraphId] = para.getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSaving'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    this.paragraphs.forEach(par => par.onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n}\n"]}