{"version":3,"sources":["frontend/ProposedProcedureOverview.js","frontend/ProposedProcedureOverview.ts"],"names":["define","require","exports","Object","defineProperty","value","ProposedProcedureOverview","[object Object]","$widget","this","interval","initUpdateWidget","$","get","updateUrl","data","success","$dateField","text","date","$proposalList","html","error","alert","window","setInterval","reload","bind","clearInterval","$updateWidget","find","$toggle","on","prop","startInterval","stopInterval","trigger"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,+BAA4B,ECIxCJ,EAAAI,0BAAA,MAOIC,YAAmBC,GAAAC,KAAAD,QAAAA,EAFXC,KAAAC,SAAmB,KAGvBD,KAAKE,mBAGDJ,SACJK,EAAEC,IAAIJ,KAAKK,WAAYC,IACdA,EAAKC,SAMVP,KAAKQ,WAAWC,KAAKH,EAAKI,MAC1BV,KAAKW,cAAcC,KAAKN,EAAKM,OANrBN,EAAKO,OACLC,MAAMR,EAAKO,UASnBf,gBACkB,OAAlBE,KAAKC,WAGTD,KAAKC,SAAWc,OAAOC,YAAYhB,KAAKiB,OAAOC,KAAKlB,MAAO,MAGvDF,eACkB,OAAlBE,KAAKC,WAGTc,OAAOI,cAAcnB,KAAKC,UAC1BD,KAAKC,SAAW,MAGZH,mBACJE,KAAKoB,cAAgBpB,KAAKD,QAAQsB,KAAK,qBACvCrB,KAAKW,cAAgBX,KAAKD,QAAQsB,KAAK,kBACvCrB,KAAKQ,WAAaR,KAAKD,QAAQsB,KAAK,sBACpCrB,KAAKK,UAAYL,KAAKD,QAAQO,KAAK,cAEnC,IAAIgB,EAAUtB,KAAKoB,cAAcC,KAAK,qBACtCC,EAAQC,GAAG,UAAU,KACKD,EAAQE,KAAK,YAE/BxB,KAAKiB,SACLjB,KAAKyB,iBAELzB,KAAK0B,kBAEVC,QAAQ","file":"ProposedProcedureOverview.js","sourcesContent":[null,"interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private $updateWidget: JQuery;\n    private updateUrl: string;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(public $widget: JQuery) {\n        this.initUpdateWidget();\n    }\n\n    private reload() {\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                if (data.error) {\n                    alert(data.error);\n                }\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 10000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}