{"version":3,"sources":["frontend/MotionMergeAmendmentsPublic.ts"],"names":["MotionMergeAmendmentsPublic","$widget","this","interval","initUpdateWidget","prototype","showSaved","$saved","$updateWidget","find","addClass","window","setTimeout","removeClass","reload","showMsg","_this","$","get","updateUrl","data","success","alert","error","$draftContent","html","$dateField","text","date","startInterval","setInterval","bind","stopInterval","clearInterval","$toggle","change","prop","trigger","click","exports"],"mappings":"wGAOA,IAAAA,GAAA,WAOI,QAAAA,GAAmBC,GAAAC,KAAAD,QAAAA,EAFXC,KAAAC,SAAmB,KAGvBD,KAAKE,mBAyDb,MAtDYJ,GAAAK,UAAAC,UAAR,WACI,GAAIC,GAASL,KAAKM,cAAcC,KAAK,SACrCF,GAAOG,SAAS,UAChBC,OAAOC,WAAW,WACdL,EAAOM,YAAY,WACpB,MAGCb,EAAAK,UAAAS,OAAR,SAAeC,GAAf,GAAAC,GAAAd,IACIe,GAAEC,IAAIhB,KAAKiB,UAAW,SAACC,GACnB,IAAKA,EAAKC,QAEN,WADAC,OAAMF,EAAKG,MAGfP,GAAKQ,cAAcC,KAAKL,EAAKK,MAC7BT,EAAKU,WAAWC,KAAKP,EAAKQ,MACtBb,GACAC,EAAKV,eAKTN,EAAAK,UAAAwB,cAAR,WAC0B,OAAlB3B,KAAKC,WAGTD,KAAKC,SAAWQ,OAAOmB,YAAY5B,KAAKY,OAAOiB,KAAK7B,MAAM,GAAQ,OAG9DF,EAAAK,UAAA2B,aAAR,WAC0B,OAAlB9B,KAAKC,WAGTQ,OAAOsB,cAAc/B,KAAKC,UAC1BD,KAAKC,SAAW,OAGZH,EAAAK,UAAAD,iBAAR,WAAA,GAAAY,GAAAd,IACIA,MAAKM,cAAgBN,KAAKD,QAAQQ,KAAK,uBACvCP,KAAKsB,cAAgBtB,KAAKD,QAAQQ,KAAK,iBACvCP,KAAKwB,WAAaxB,KAAKD,QAAQQ,KAAK,mBACpCP,KAAKiB,UAAYjB,KAAKD,QAAQmB,KAAK,aAEnC,IAAIc,GAAUhC,KAAKM,cAAcC,KAAK,oBACtCyB,GAAQC,OAAO,WACPD,EAAQE,KAAK,WACbpB,EAAKa,gBAELb,EAAKgB,iBAEVK,QAAQ,UAEXnC,KAAKM,cAAcC,KAAK,cAAc6B,MAAMpC,KAAKY,OAAOiB,KAAK7B,MAAM,KAE3EF,IAjEauC,GAAAvC,4BAAAA","file":"MotionMergeAmendmentsPublic.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class MotionMergeAmendmentsPublic {\n    private $updateWidget: JQuery;\n    private updateUrl: string;\n    private $draftContent: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(public $widget: JQuery) {\n        this.initUpdateWidget();\n    }\n\n    private showSaved() {\n        let $saved = this.$updateWidget.find('.saved');\n        $saved.addClass('active');\n        window.setTimeout(() => {\n            $saved.removeClass('active');\n        }, 2000);\n    }\n\n    private reload(showMsg: boolean) {\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$draftContent.html(data.html);\n            this.$dateField.text(data.date);\n            if (showMsg) {\n                this.showSaved();\n            }\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this, false), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.motionUpdateWidget');\n        this.$draftContent = this.$widget.find('.draftContent');\n        this.$dateField = this.$widget.find('.mergeDraftDate');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            if ($toggle.prop('checked')) {\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n\n        this.$updateWidget.find('#updateBtn').click(this.reload.bind(this, true));\n    }\n}\n"]}